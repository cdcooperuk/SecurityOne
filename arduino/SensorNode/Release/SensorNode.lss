
SensorNode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  0000252e  000025c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000252e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d5  008001e4  008001e4  000026a6  2**0
                  ALLOC
  3 .stab         0000c30c  00000000  00000000  000026a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00013a78  00000000  00000000  0000e9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  0002242c  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 01 	jmp	0x282	; 0x282 <__dtors_end>
       4:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
       8:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
       c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      10:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      14:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      18:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      1c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      20:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      24:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      28:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      2c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      30:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      34:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      38:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      3c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      40:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_16>
      44:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      48:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__vector_18>
      4c:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_19>
      50:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      54:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      58:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      5c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      60:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      64:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>

00000068 <_ZZN4RF2412print_statusEhE3__c>:
      68:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
      78:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
      88:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
      98:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
      a8:	3d 25 78 0d 0a 00                                   =%x...

000000ae <_ZZN4RF2416print_observe_txEhE3__c>:
      ae:	4f 42 53 45 52 56 45 5f 54 58 3d 25 30 32 78 3a     OBSERVE_TX=%02x:
      be:	20 50 4f 4c 53 5f 43 4e 54 3d 25 78 20 41 52 43      POLS_CNT=%x ARC
      ce:	5f 43 4e 54 3d 25 78 0d 0a 00                       _CNT=%x...

000000d8 <_ZZN4RF2419print_byte_registerEPKchhE3__c>:
      d8:	25 53 09 25 63 20 3d 00                             %S.%c =.

000000e0 <_ZZN4RF2419print_byte_registerEPKchhE3__c_0>:
      e0:	20 30 78 25 30 32 78 00                              0x%02x.

000000e8 <_ZZN4RF2419print_byte_registerEPKchhE3__c_1>:
      e8:	0d 0a 00                                            ...

000000eb <_ZZN4RF2422print_address_registerEPKchhE3__c>:
      eb:	25 53 09 25 63 20 3d 00                             %S.%c =.

000000f3 <_ZZN4RF2422print_address_registerEPKchhE3__c_0>:
      f3:	20 30 78 00                                          0x.

000000f7 <_ZZN4RF2422print_address_registerEPKchhE3__c_1>:
      f7:	25 30 32 78 00                                      %02x.

000000fc <_ZZN4RF2422print_address_registerEPKchhE3__c_2>:
      fc:	0d 0a 00                                            ...

000000ff <_ZZN4RF2412printDetailsEvE3__c>:
      ff:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

0000010c <_ZZN4RF2412printDetailsEvE3__c_0>:
     10c:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

00000119 <_ZZN4RF2412printDetailsEvE3__c_1>:
     119:	54 58 5f 41 44 44 52 00                             TX_ADDR.

00000121 <_ZZN4RF2412printDetailsEvE3__c_2>:
     121:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

0000012c <_ZZN4RF2412printDetailsEvE3__c_3>:
     12c:	45 4e 5f 41 41 00                                   EN_AA.

00000132 <_ZZN4RF2412printDetailsEvE3__c_4>:
     132:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

0000013c <_ZZN4RF2412printDetailsEvE3__c_5>:
     13c:	52 46 5f 43 48 00                                   RF_CH.

00000142 <_ZZN4RF2412printDetailsEvE3__c_6>:
     142:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

0000014b <_ZZN4RF2412printDetailsEvE3__c_7>:
     14b:	43 4f 4e 46 49 47 00                                CONFIG.

00000152 <_ZZN4RF2412printDetailsEvE3__c_8>:
     152:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

00000160 <_ZL21rf24_datarate_e_str_P>:
     160:	cf 01 d5 01 db 01                                   ......

00000166 <_ZZN4RF2412printDetailsEvE3__c_9>:
     166:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
     176:	0a 00                                               ..

00000178 <_ZL18rf24_model_e_str_P>:
     178:	e3 01 ec 01                                         ....

0000017c <_ZZN4RF2412printDetailsEvE3__c_10>:
     17c:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

0000018b <_ZL22rf24_crclength_e_str_P>:
     18b:	f6 01 ff 01 06 02                                   ......

00000191 <_ZZN4RF2412printDetailsEvE3__c_11>:
     191:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
     1a1:	0d 0a 00                                            ...

000001a4 <_ZL19rf24_pa_dbm_e_str_P>:
     1a4:	0e 02 15 02 1c 02 24 02                             ......$.

000001ac <_ZZN4RF2412printDetailsEvE3__c_12>:
     1ac:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

000001bd <_ZL10child_pipe>:
     1bd:	0a 0b 0c 0d 0e 0f                                   ......

000001c3 <_ZL18child_payload_size>:
     1c3:	11 12 13 14 15 16                                   ......

000001c9 <_ZL17child_pipe_enable>:
     1c9:	00 01 02 03 04 05                                   ......

000001cf <_ZL21rf24_datarate_e_str_0>:
     1cf:	31 4d 42 50 53 00                                   1MBPS.

000001d5 <_ZL21rf24_datarate_e_str_1>:
     1d5:	32 4d 42 50 53 00                                   2MBPS.

000001db <_ZL21rf24_datarate_e_str_2>:
     1db:	32 35 30 4b 42 50 53 00                             250KBPS.

000001e3 <_ZL18rf24_model_e_str_0>:
     1e3:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

000001ec <_ZL18rf24_model_e_str_1>:
     1ec:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

000001f6 <_ZL22rf24_crclength_e_str_0>:
     1f6:	44 69 73 61 62 6c 65 64 00                          Disabled.

000001ff <_ZL22rf24_crclength_e_str_1>:
     1ff:	38 20 62 69 74 73 00                                8 bits.

00000206 <_ZL22rf24_crclength_e_str_2>:
     206:	31 36 20 62 69 74 73 00                             16 bits.

0000020e <_ZL19rf24_pa_dbm_e_str_0>:
     20e:	50 41 5f 4d 49 4e 00                                PA_MIN.

00000215 <_ZL19rf24_pa_dbm_e_str_1>:
     215:	50 41 5f 4c 4f 57 00                                PA_LOW.

0000021c <_ZL19rf24_pa_dbm_e_str_2>:
     21c:	50 41 5f 48 49 47 48 00                             PA_HIGH.

00000224 <_ZL19rf24_pa_dbm_e_str_3>:
     224:	50 41 5f 4d 41 58 00                                PA_MAX.

0000022b <digital_pin_to_timer_PGM>:
     22b:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     23b:	00 00 00 00                                         ....

0000023f <digital_pin_to_bit_mask_PGM>:
     23f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     24f:	04 08 10 20                                         ... 

00000253 <digital_pin_to_port_PGM>:
     253:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     263:	03 03 03 03                                         ....

00000267 <port_to_output_PGM>:
     267:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000271 <port_to_mode_PGM>:
     271:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000027c <__ctors_start>:
     27c:	88 09       	sbc	r24, r8
     27e:	31 0b       	sbc	r19, r17

00000280 <__ctors_end>:
     280:	92 09       	sbc	r25, r2

00000282 <__dtors_end>:
     282:	11 24       	eor	r1, r1
     284:	1f be       	out	0x3f, r1	; 63
     286:	cf ef       	ldi	r28, 0xFF	; 255
     288:	d8 e0       	ldi	r29, 0x08	; 8
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	cd bf       	out	0x3d, r28	; 61

0000028e <__do_copy_data>:
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	a0 e0       	ldi	r26, 0x00	; 0
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	ee e2       	ldi	r30, 0x2E	; 46
     296:	f5 e2       	ldi	r31, 0x25	; 37
     298:	02 c0       	rjmp	.+4      	; 0x29e <__do_copy_data+0x10>
     29a:	05 90       	lpm	r0, Z+
     29c:	0d 92       	st	X+, r0
     29e:	a4 3e       	cpi	r26, 0xE4	; 228
     2a0:	b1 07       	cpc	r27, r17
     2a2:	d9 f7       	brne	.-10     	; 0x29a <__do_copy_data+0xc>

000002a4 <__do_clear_bss>:
     2a4:	12 e0       	ldi	r17, 0x02	; 2
     2a6:	a4 ee       	ldi	r26, 0xE4	; 228
     2a8:	b1 e0       	ldi	r27, 0x01	; 1
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <.do_clear_bss_start>

000002ac <.do_clear_bss_loop>:
     2ac:	1d 92       	st	X+, r1

000002ae <.do_clear_bss_start>:
     2ae:	a9 3b       	cpi	r26, 0xB9	; 185
     2b0:	b1 07       	cpc	r27, r17
     2b2:	e1 f7       	brne	.-8      	; 0x2ac <.do_clear_bss_loop>

000002b4 <__do_global_ctors>:
     2b4:	12 e0       	ldi	r17, 0x02	; 2
     2b6:	c0 e8       	ldi	r28, 0x80	; 128
     2b8:	d2 e0       	ldi	r29, 0x02	; 2
     2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <__do_global_ctors+0x10>
     2bc:	22 97       	sbiw	r28, 0x02	; 2
     2be:	fe 01       	movw	r30, r28
     2c0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__tablejump__>
     2c4:	cc 37       	cpi	r28, 0x7C	; 124
     2c6:	d1 07       	cpc	r29, r17
     2c8:	c9 f7       	brne	.-14     	; 0x2bc <__do_global_ctors+0x8>
     2ca:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <main>
     2ce:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__do_global_dtors>

000002d2 <__bad_interrupt>:
     2d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d6 <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	8a e0       	ldi	r24, 0x0A	; 10
     2da:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <digitalWrite>

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
     2e6:	8c b5       	in	r24, 0x2c	; 44
     2e8:	80 61       	ori	r24, 0x10	; 16
     2ea:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     2ec:	8c b5       	in	r24, 0x2c	; 44
     2ee:	80 64       	ori	r24, 0x40	; 64
     2f0:	8c bd       	out	0x2c, r24	; 44
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	8d e0       	ldi	r24, 0x0D	; 13
     2f6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>
  pinMode(MOSI, OUTPUT);
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	8b e0       	ldi	r24, 0x0B	; 11
     2fe:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <pinMode>

00000302 <_ZN8SPIClass11setBitOrderEh>:
  SPCR &= ~_BV(SPE);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
     302:	81 11       	cpse	r24, r1
     304:	03 c0       	rjmp	.+6      	; 0x30c <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
     306:	8c b5       	in	r24, 0x2c	; 44
     308:	80 62       	ori	r24, 0x20	; 32
     30a:	02 c0       	rjmp	.+4      	; 0x310 <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
     30c:	8c b5       	in	r24, 0x2c	; 44
     30e:	8f 7d       	andi	r24, 0xDF	; 223
     310:	8c bd       	out	0x2c, r24	; 44
     312:	08 95       	ret

00000314 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
     314:	9c b5       	in	r25, 0x2c	; 44
     316:	93 7f       	andi	r25, 0xF3	; 243
     318:	98 2b       	or	r25, r24
     31a:	9c bd       	out	0x2c, r25	; 44
     31c:	08 95       	ret

0000031e <_ZN8SPIClass15setClockDividerEh>:
}

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
     31e:	2c b5       	in	r18, 0x2c	; 44
     320:	98 2f       	mov	r25, r24
     322:	93 70       	andi	r25, 0x03	; 3
     324:	2c 7f       	andi	r18, 0xFC	; 252
     326:	92 2b       	or	r25, r18
     328:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
     32a:	9d b5       	in	r25, 0x2d	; 45
     32c:	82 fb       	bst	r24, 2
     32e:	88 27       	eor	r24, r24
     330:	80 f9       	bld	r24, 0
     332:	9e 7f       	andi	r25, 0xFE	; 254
     334:	98 2b       	or	r25, r24
     336:	9d bd       	out	0x2d, r25	; 45
     338:	08 95       	ret

0000033a <_ZN8SPIClass8transferEh>:
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     33a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
     33c:	0d b4       	in	r0, 0x2d	; 45
     33e:	07 fe       	sbrs	r0, 7
     340:	fd cf       	rjmp	.-6      	; 0x33c <_ZN8SPIClass8transferEh+0x2>
    ;
  return SPDR;
     342:	8e b5       	in	r24, 0x2e	; 46
}
     344:	08 95       	ret

00000346 <_ZN4RF243csnEi>:


/****************************************************************************/

void RF24::csn(int mode)
{
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	1f 92       	push	r1
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	8c 01       	movw	r16, r24
  // Minimum ideal SPI bus speed is 2x data rate
  // If we assume 2Mbs data rate and 16Mhz clock, a
  // divider of 4 is the minimum we want.
  // CLK:BUS 8Mhz:2Mhz, 16Mhz:4Mhz, or 20Mhz:5Mhz
#ifdef ARDUINO
  SPI.setBitOrder(MSBFIRST);
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	69 83       	std	Y+1, r22	; 0x01
     35a:	0e 94 81 01 	call	0x302	; 0x302 <_ZN8SPIClass11setBitOrderEh>
  SPI.setDataMode(SPI_MODE0);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN8SPIClass11setDataModeEh>
  SPI.setClockDivider(SPI_CLOCK_DIV16);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN8SPIClass15setClockDividerEh>

#endif
  digitalWrite(csn_pin,mode);
     36a:	69 81       	ldd	r22, Y+1	; 0x01
     36c:	f8 01       	movw	r30, r16
     36e:	81 81       	ldd	r24, Z+1	; 0x01
}
     370:	0f 90       	pop	r0
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
  SPI.setBitOrder(MSBFIRST);
  SPI.setDataMode(SPI_MODE0);
  SPI.setClockDivider(SPI_CLOCK_DIV16);

#endif
  digitalWrite(csn_pin,mode);
     37a:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <digitalWrite>

0000037e <_ZN4RF242ceEi>:

/****************************************************************************/

void RF24::ce(int level)
{
  digitalWrite(ce_pin,level);
     37e:	fc 01       	movw	r30, r24
     380:	80 81       	ld	r24, Z
     382:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <digitalWrite>

00000386 <_ZN4RF2413read_registerEhPhh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg, uint8_t* buf, uint8_t len)
{
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	00 d0       	rcall	.+0      	; 0x398 <_ZN4RF2413read_registerEhPhh+0x12>
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	8c 01       	movw	r16, r24
     39e:	e6 2e       	mov	r14, r22
     3a0:	f2 2e       	mov	r15, r18
  uint8_t status;

  csn(LOW);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	49 83       	std	Y+1, r20	; 0x01
     3a8:	5a 83       	std	Y+2, r21	; 0x02
     3aa:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  status = SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
     3ae:	8e 2d       	mov	r24, r14
     3b0:	8f 71       	andi	r24, 0x1F	; 31
     3b2:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     3b6:	e8 2e       	mov	r14, r24
  while ( len-- )
     3b8:	49 81       	ldd	r20, Y+1	; 0x01
     3ba:	c4 2e       	mov	r12, r20
     3bc:	5a 81       	ldd	r21, Y+2	; 0x02
     3be:	d5 2e       	mov	r13, r21
  digitalWrite(ce_pin,level);
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg, uint8_t* buf, uint8_t len)
     3c0:	f4 0e       	add	r15, r20
{
  uint8_t status;

  csn(LOW);
  status = SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
  while ( len-- )
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <_ZN4RF2413read_registerEhPhh+0x4a>
    *buf++ = SPI.transfer(0xff);
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     3ca:	f6 01       	movw	r30, r12
     3cc:	81 93       	st	Z+, r24
     3ce:	6f 01       	movw	r12, r30
{
  uint8_t status;

  csn(LOW);
  status = SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
  while ( len-- )
     3d0:	fc 10       	cpse	r15, r12
     3d2:	f8 cf       	rjmp	.-16     	; 0x3c4 <_ZN4RF2413read_registerEhPhh+0x3e>
    *buf++ = SPI.transfer(0xff);

  csn(HIGH);
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	c8 01       	movw	r24, r16
     3da:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>

  return status;
}
     3de:	8e 2d       	mov	r24, r14
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	08 95       	ret

000003f6 <_ZN4RF2413read_registerEh>:

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	ec 01       	movw	r28, r24
     3fe:	16 2f       	mov	r17, r22
  csn(LOW);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
     408:	81 2f       	mov	r24, r17
     40a:	8f 71       	andi	r24, 0x1F	; 31
     40c:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
  uint8_t result = SPI.transfer(0xff);
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     416:	18 2f       	mov	r17, r24

  csn(HIGH);
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	ce 01       	movw	r24, r28
     41e:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  return result;
}
     422:	81 2f       	mov	r24, r17
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	08 95       	ret

0000042c <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	00 d0       	rcall	.+0      	; 0x43e <_ZN4RF2414write_registerEhPKhh+0x12>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	8c 01       	movw	r16, r24
     444:	e6 2e       	mov	r14, r22
     446:	f2 2e       	mov	r15, r18
  uint8_t status;

  csn(LOW);
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	49 83       	std	Y+1, r20	; 0x01
     44e:	5a 83       	std	Y+2, r21	; 0x02
     450:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  status = SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
     454:	8e 2d       	mov	r24, r14
     456:	8f 71       	andi	r24, 0x1F	; 31
     458:	80 62       	ori	r24, 0x20	; 32
     45a:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     45e:	e8 2e       	mov	r14, r24
  while ( len-- )
     460:	49 81       	ldd	r20, Y+1	; 0x01
     462:	c4 2e       	mov	r12, r20
     464:	5a 81       	ldd	r21, Y+2	; 0x02
     466:	d5 2e       	mov	r13, r21
  return result;
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
     468:	f4 0e       	add	r15, r20
{
  uint8_t status;

  csn(LOW);
  status = SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
  while ( len-- )
     46a:	05 c0       	rjmp	.+10     	; 0x476 <_ZN4RF2414write_registerEhPKhh+0x4a>
    SPI.transfer(*buf++);
     46c:	f6 01       	movw	r30, r12
     46e:	81 91       	ld	r24, Z+
     470:	6f 01       	movw	r12, r30
     472:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
{
  uint8_t status;

  csn(LOW);
  status = SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
  while ( len-- )
     476:	fc 10       	cpse	r15, r12
     478:	f9 cf       	rjmp	.-14     	; 0x46c <_ZN4RF2414write_registerEhPKhh+0x40>
    SPI.transfer(*buf++);

  csn(HIGH);
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	c8 01       	movw	r24, r16
     480:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>

  return status;
}
     484:	8e 2d       	mov	r24, r14
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	df 90       	pop	r13
     498:	cf 90       	pop	r12
     49a:	08 95       	ret

0000049c <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	1f 92       	push	r1
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	7c 01       	movw	r14, r24
     4ae:	16 2f       	mov	r17, r22
  uint8_t status;

  IF_SERIAL_DEBUG(printf_P(PSTR("write_register(%02x,%02x)\r\n"),reg,value));

  csn(LOW);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	49 83       	std	Y+1, r20	; 0x01
     4b6:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  status = SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
     4ba:	81 2f       	mov	r24, r17
     4bc:	8f 71       	andi	r24, 0x1F	; 31
     4be:	80 62       	ori	r24, 0x20	; 32
     4c0:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     4c4:	18 2f       	mov	r17, r24
  SPI.transfer(value);
     4c6:	49 81       	ldd	r20, Y+1	; 0x01
     4c8:	84 2f       	mov	r24, r20
     4ca:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
  csn(HIGH);
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	c7 01       	movw	r24, r14
     4d4:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>

  return status;
}
     4d8:	81 2f       	mov	r24, r17
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	08 95       	ret

000004e8 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t len, const uint8_t writeType)
{
     4e8:	8f 92       	push	r8
     4ea:	9f 92       	push	r9
     4ec:	bf 92       	push	r11
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	8c 01       	movw	r16, r24
     506:	d6 2e       	mov	r13, r22
     508:	b7 2e       	mov	r11, r23
  uint8_t status;

  const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

  uint8_t data_len = min(len,payload_size);
     50a:	fc 01       	movw	r30, r24
     50c:	f4 80       	ldd	r15, Z+4	; 0x04
     50e:	e4 2e       	mov	r14, r20
     510:	f4 16       	cp	r15, r20
     512:	08 f4       	brcc	.+2      	; 0x516 <_ZN4RF2413write_payloadEPKvhh+0x2e>
     514:	ef 2c       	mov	r14, r15
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     516:	f8 01       	movw	r30, r16
     518:	86 81       	ldd	r24, Z+6	; 0x06
     51a:	81 11       	cpse	r24, r1
     51c:	02 c0       	rjmp	.+4      	; 0x522 <_ZN4RF2413write_payloadEPKvhh+0x3a>
     51e:	fe 18       	sub	r15, r14
     520:	01 c0       	rjmp	.+2      	; 0x524 <_ZN4RF2413write_payloadEPKvhh+0x3c>
     522:	f1 2c       	mov	r15, r1

  //printf("[Writing %u bytes %u blanks]",data_len,blank_len);

  csn(LOW);
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	c8 01       	movw	r24, r16
     52a:	29 83       	std	Y+1, r18	; 0x01
     52c:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  status = SPI.transfer( writeType );
     530:	29 81       	ldd	r18, Y+1	; 0x01
     532:	82 2f       	mov	r24, r18
     534:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     538:	c8 2e       	mov	r12, r24

uint8_t RF24::write_payload(const void* buf, uint8_t len, const uint8_t writeType)
{
  uint8_t status;

  const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);
     53a:	8d 2c       	mov	r8, r13
     53c:	9b 2c       	mov	r9, r11
  return status;
}

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t len, const uint8_t writeType)
     53e:	ed 0c       	add	r14, r13

  //printf("[Writing %u bytes %u blanks]",data_len,blank_len);

  csn(LOW);
  status = SPI.transfer( writeType );
  while ( data_len-- )
     540:	05 c0       	rjmp	.+10     	; 0x54c <_ZN4RF2413write_payloadEPKvhh+0x64>
    SPI.transfer(*current++);
     542:	f4 01       	movw	r30, r8
     544:	81 91       	ld	r24, Z+
     546:	4f 01       	movw	r8, r30
     548:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>

  //printf("[Writing %u bytes %u blanks]",data_len,blank_len);

  csn(LOW);
  status = SPI.transfer( writeType );
  while ( data_len-- )
     54c:	e8 10       	cpse	r14, r8
     54e:	f9 cf       	rjmp	.-14     	; 0x542 <_ZN4RF2413write_payloadEPKvhh+0x5a>
     550:	04 c0       	rjmp	.+8      	; 0x55a <_ZN4RF2413write_payloadEPKvhh+0x72>
    SPI.transfer(*current++);
  while ( blank_len-- )
    SPI.transfer(0);
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     558:	fa 94       	dec	r15

  csn(LOW);
  status = SPI.transfer( writeType );
  while ( data_len-- )
    SPI.transfer(*current++);
  while ( blank_len-- )
     55a:	f1 10       	cpse	r15, r1
     55c:	fa cf       	rjmp	.-12     	; 0x552 <_ZN4RF2413write_payloadEPKvhh+0x6a>
    SPI.transfer(0);
  csn(HIGH);
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	c8 01       	movw	r24, r16
     564:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>

  return status;
}
     568:	8c 2d       	mov	r24, r12
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	df 90       	pop	r13
     57a:	cf 90       	pop	r12
     57c:	bf 90       	pop	r11
     57e:	9f 90       	pop	r9
     580:	8f 90       	pop	r8
     582:	08 95       	ret

00000584 <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t len)
{
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	8c 01       	movw	r16, r24
     598:	d6 2e       	mov	r13, r22
     59a:	b7 2e       	mov	r11, r23
  uint8_t status;
  uint8_t* current = reinterpret_cast<uint8_t*>(buf);

  uint8_t data_len = min(len,payload_size);
     59c:	fc 01       	movw	r30, r24
     59e:	f4 80       	ldd	r15, Z+4	; 0x04
     5a0:	e4 2e       	mov	r14, r20
     5a2:	f4 16       	cp	r15, r20
     5a4:	08 f4       	brcc	.+2      	; 0x5a8 <_ZN4RF2412read_payloadEPvh+0x24>
     5a6:	ef 2c       	mov	r14, r15
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     5a8:	f8 01       	movw	r30, r16
     5aa:	86 81       	ldd	r24, Z+6	; 0x06
     5ac:	81 11       	cpse	r24, r1
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <_ZN4RF2412read_payloadEPvh+0x30>
     5b0:	fe 18       	sub	r15, r14
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <_ZN4RF2412read_payloadEPvh+0x32>
     5b4:	f1 2c       	mov	r15, r1
  
  //printf("[Reading %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	c8 01       	movw	r24, r16
     5bc:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  status = SPI.transfer( R_RX_PAYLOAD );
     5c0:	81 e6       	ldi	r24, 0x61	; 97
     5c2:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     5c6:	c8 2e       	mov	r12, r24
/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t len)
{
  uint8_t status;
  uint8_t* current = reinterpret_cast<uint8_t*>(buf);
     5c8:	cd 2d       	mov	r28, r13
     5ca:	db 2d       	mov	r29, r11
  return status;
}

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t len)
     5cc:	ed 0c       	add	r14, r13
  
  //printf("[Reading %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
  status = SPI.transfer( R_RX_PAYLOAD );
  while ( data_len-- )
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <_ZN4RF2412read_payloadEPvh+0x54>
    *current++ = SPI.transfer(0xff);
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     5d6:	89 93       	st	Y+, r24
  
  //printf("[Reading %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
  status = SPI.transfer( R_RX_PAYLOAD );
  while ( data_len-- )
     5d8:	ec 12       	cpse	r14, r28
     5da:	fa cf       	rjmp	.-12     	; 0x5d0 <_ZN4RF2412read_payloadEPvh+0x4c>
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <_ZN4RF2412read_payloadEPvh+0x62>
    *current++ = SPI.transfer(0xff);
  while ( blank_len-- )
    SPI.transfer(0xff);
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     5e4:	fa 94       	dec	r15
  
  csn(LOW);
  status = SPI.transfer( R_RX_PAYLOAD );
  while ( data_len-- )
    *current++ = SPI.transfer(0xff);
  while ( blank_len-- )
     5e6:	f1 10       	cpse	r15, r1
     5e8:	fa cf       	rjmp	.-12     	; 0x5de <_ZN4RF2412read_payloadEPvh+0x5a>
    SPI.transfer(0xff);
  csn(HIGH);
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	c8 01       	movw	r24, r16
     5f0:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>

  return status;
}
     5f4:	8c 2d       	mov	r24, r12
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	08 95       	ret

0000060a <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
  uint8_t status;

  csn(LOW);
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  status = SPI.transfer( FLUSH_RX );
     61a:	82 ee       	ldi	r24, 0xE2	; 226
     61c:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     620:	18 2f       	mov	r17, r24
  csn(HIGH);
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	ce 01       	movw	r24, r28
     628:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>

  return status;
}
     62c:	81 2f       	mov	r24, r17
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	08 95       	ret

00000636 <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	ec 01       	movw	r28, r24
  uint8_t status;

  csn(LOW);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  status = SPI.transfer( FLUSH_TX );
     646:	81 ee       	ldi	r24, 0xE1	; 225
     648:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     64c:	18 2f       	mov	r17, r24
  csn(HIGH);
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	ce 01       	movw	r24, r28
     654:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>

  return status;
}
     658:	81 2f       	mov	r24, r17
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	08 95       	ret

00000662 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
  uint8_t status;

  csn(LOW);
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  status = SPI.transfer( NOP );
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     678:	18 2f       	mov	r17, r24
  csn(HIGH);
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>

  return status;
}
     684:	81 2f       	mov	r24, r17
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	08 95       	ret

0000068e <_ZN4RF2412print_statusEh>:
           (status & _BV(RX_DR))?1:0,
           (status & _BV(TX_DS))?1:0,
           (status & _BV(MAX_RT))?1:0,
           ((status >> RX_P_NO) & B111),
           (status & _BV(TX_FULL))?1:0
          );
     68e:	86 2f       	mov	r24, r22
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	26 2f       	mov	r18, r22
     694:	21 70       	andi	r18, 0x01	; 1
     696:	1f 92       	push	r1
     698:	2f 93       	push	r18
     69a:	95 95       	asr	r25
     69c:	87 95       	ror	r24
     69e:	87 70       	andi	r24, 0x07	; 7
     6a0:	99 27       	eor	r25, r25
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	64 fb       	bst	r22, 4
     6a8:	88 27       	eor	r24, r24
     6aa:	80 f9       	bld	r24, 0
     6ac:	1f 92       	push	r1
     6ae:	8f 93       	push	r24
     6b0:	65 fb       	bst	r22, 5
     6b2:	88 27       	eor	r24, r24
     6b4:	80 f9       	bld	r24, 0
     6b6:	1f 92       	push	r1
     6b8:	8f 93       	push	r24
     6ba:	66 fb       	bst	r22, 6
     6bc:	88 27       	eor	r24, r24
     6be:	80 f9       	bld	r24, 0
     6c0:	1f 92       	push	r1
     6c2:	8f 93       	push	r24
     6c4:	1f 92       	push	r1
     6c6:	6f 93       	push	r22
     6c8:	88 e6       	ldi	r24, 0x68	; 104
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
     6d4:	8d b7       	in	r24, 0x3d	; 61
     6d6:	9e b7       	in	r25, 0x3e	; 62
     6d8:	0e 96       	adiw	r24, 0x0e	; 14
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	9e bf       	out	0x3e, r25	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	8d bf       	out	0x3d, r24	; 61
     6e4:	08 95       	ret

000006e6 <_ZN4RF2419print_byte_registerEPKchh>:
}

/****************************************************************************/

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
     6e6:	af 92       	push	r10
     6e8:	bf 92       	push	r11
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <_ZN4RF2419print_byte_registerEPKchh+0x14>
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	8c 01       	movw	r16, r24
     700:	f4 2e       	mov	r15, r20
     702:	e2 2e       	mov	r14, r18


__attribute__((__always_inline__)) static inline size_t strlen_P(const char * s);
static inline size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
     704:	cb 01       	movw	r24, r22
     706:	69 83       	std	Y+1, r22	; 0x01
     708:	7a 83       	std	Y+2, r23	; 0x02
     70a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__strlen_P>
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
     70e:	69 81       	ldd	r22, Y+1	; 0x01
     710:	7a 81       	ldd	r23, Y+2	; 0x02
     712:	08 97       	sbiw	r24, 0x08	; 8
     714:	10 f4       	brcc	.+4      	; 0x71a <_ZN4RF2419print_byte_registerEPKchh+0x34>
     716:	89 e0       	ldi	r24, 0x09	; 9
     718:	01 c0       	rjmp	.+2      	; 0x71c <_ZN4RF2419print_byte_registerEPKchh+0x36>
     71a:	80 e0       	ldi	r24, 0x00	; 0
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
     71c:	1f 92       	push	r1
     71e:	8f 93       	push	r24
     720:	7f 93       	push	r23
     722:	6f 93       	push	r22
     724:	e8 ed       	ldi	r30, 0xD8	; 216
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	ff 93       	push	r31
     72a:	ef 93       	push	r30
     72c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
          );
}

/****************************************************************************/

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
     730:	ef 0c       	add	r14, r15
{
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
  while (qty--)
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
     73e:	30 ee       	ldi	r19, 0xE0	; 224
     740:	a3 2e       	mov	r10, r19
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	b3 2e       	mov	r11, r19

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
  while (qty--)
     746:	11 c0       	rjmp	.+34     	; 0x76a <_ZN4RF2419print_byte_registerEPKchh+0x84>
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
     748:	df 2c       	mov	r13, r15
     74a:	d3 94       	inc	r13
     74c:	6f 2d       	mov	r22, r15
     74e:	c8 01       	movw	r24, r16
     750:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
     754:	1f 92       	push	r1
     756:	8f 93       	push	r24
     758:	bf 92       	push	r11
     75a:	af 92       	push	r10
     75c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	fd 2c       	mov	r15, r13

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
  while (qty--)
     76a:	fe 10       	cpse	r15, r14
     76c:	ed cf       	rjmp	.-38     	; 0x748 <_ZN4RF2419print_byte_registerEPKchh+0x62>
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
  printf_P(PSTR("\r\n"));
     76e:	88 ee       	ldi	r24, 0xE8	; 232
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
}
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	bf 90       	pop	r11
     792:	af 90       	pop	r10
     794:	08 95       	ret

00000796 <_ZN4RF2422print_address_registerEPKchh>:

/****************************************************************************/

void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
     796:	6f 92       	push	r6
     798:	7f 92       	push	r7
     79a:	8f 92       	push	r8
     79c:	9f 92       	push	r9
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	27 97       	sbiw	r28, 0x07	; 7
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	4c 01       	movw	r8, r24
     7c4:	14 2f       	mov	r17, r20
     7c6:	72 2e       	mov	r7, r18
     7c8:	cb 01       	movw	r24, r22
     7ca:	6e 83       	std	Y+6, r22	; 0x06
     7cc:	7f 83       	std	Y+7, r23	; 0x07
     7ce:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__strlen_P>
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
     7d2:	6e 81       	ldd	r22, Y+6	; 0x06
     7d4:	7f 81       	ldd	r23, Y+7	; 0x07
     7d6:	08 97       	sbiw	r24, 0x08	; 8
     7d8:	10 f4       	brcc	.+4      	; 0x7de <_ZN4RF2422print_address_registerEPKchh+0x48>
     7da:	89 e0       	ldi	r24, 0x09	; 9
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <_ZN4RF2422print_address_registerEPKchh+0x4a>
     7de:	80 e0       	ldi	r24, 0x00	; 0
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
     7e0:	1f 92       	push	r1
     7e2:	8f 93       	push	r24
     7e4:	7f 93       	push	r23
     7e6:	6f 93       	push	r22
     7e8:	eb ee       	ldi	r30, 0xEB	; 235
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	ff 93       	push	r31
     7ee:	ef 93       	push	r30
     7f0:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
  printf_P(PSTR("\r\n"));
}

/****************************************************************************/

void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
     7f4:	71 0e       	add	r7, r17
{
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);

  while (qty--)
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
  {
    uint8_t buffer[5];
    read_register(reg++,buffer,sizeof buffer);
     802:	ee 24       	eor	r14, r14
     804:	e3 94       	inc	r14
     806:	f1 2c       	mov	r15, r1
     808:	ec 0e       	add	r14, r28
     80a:	fd 1e       	adc	r15, r29

    printf_P(PSTR(" 0x"));
     80c:	53 ef       	ldi	r21, 0xF3	; 243
     80e:	c5 2e       	mov	r12, r21
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	d5 2e       	mov	r13, r21
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
     814:	67 ef       	ldi	r22, 0xF7	; 247
     816:	a6 2e       	mov	r10, r22
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	b6 2e       	mov	r11, r22
void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);

  while (qty--)
     81c:	23 c0       	rjmp	.+70     	; 0x864 <_ZN4RF2422print_address_registerEPKchh+0xce>
  {
    uint8_t buffer[5];
    read_register(reg++,buffer,sizeof buffer);
     81e:	61 2e       	mov	r6, r17
     820:	63 94       	inc	r6
     822:	25 e0       	ldi	r18, 0x05	; 5
     824:	a7 01       	movw	r20, r14
     826:	61 2f       	mov	r22, r17
     828:	c4 01       	movw	r24, r8
     82a:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN4RF2413read_registerEhPhh>

    printf_P(PSTR(" 0x"));
     82e:	df 92       	push	r13
     830:	cf 92       	push	r12
     832:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
    uint8_t* bufptr = buffer + sizeof buffer;
     836:	8e 01       	movw	r16, r28
     838:	0a 5f       	subi	r16, 0xFA	; 250
     83a:	1f 4f       	sbci	r17, 0xFF	; 255
    while( --bufptr >= buffer )
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0d c0       	rjmp	.+26     	; 0x85c <_ZN4RF2422print_address_registerEPKchh+0xc6>
      printf_P(PSTR("%02x"),*bufptr);
     842:	f8 01       	movw	r30, r16
     844:	82 91       	ld	r24, -Z
     846:	8f 01       	movw	r16, r30
     848:	1f 92       	push	r1
     84a:	8f 93       	push	r24
     84c:	bf 92       	push	r11
     84e:	af 92       	push	r10
     850:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
    uint8_t buffer[5];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
     85c:	0e 15       	cp	r16, r14
     85e:	1f 05       	cpc	r17, r15
     860:	81 f7       	brne	.-32     	; 0x842 <_ZN4RF2422print_address_registerEPKchh+0xac>
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);

  while (qty--)
  {
    uint8_t buffer[5];
    read_register(reg++,buffer,sizeof buffer);
     862:	16 2d       	mov	r17, r6
void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);

  while (qty--)
     864:	17 11       	cpse	r17, r7
     866:	db cf       	rjmp	.-74     	; 0x81e <_ZN4RF2422print_address_registerEPKchh+0x88>
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
     868:	8c ef       	ldi	r24, 0xFC	; 252
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	9f 93       	push	r25
     86e:	8f 93       	push	r24
     870:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
}
     878:	27 96       	adiw	r28, 0x07	; 7
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	9f 90       	pop	r9
     89a:	8f 90       	pop	r8
     89c:	7f 90       	pop	r7
     89e:	6f 90       	pop	r6
     8a0:	08 95       	ret

000008a2 <_ZN4RF24C1Ehh>:

/****************************************************************************/

RF24::RF24(uint8_t _cepin, uint8_t _cspin):
     8a2:	fc 01       	movw	r30, r24

  ce_pin(_cepin), csn_pin(_cspin), wide_band(true), p_variant(false), 
  payload_size(32), ack_payload_available(false), dynamic_payloads_enabled(false),
  pipe0_reading_address(0)
     8a4:	60 83       	st	Z, r22
     8a6:	41 83       	std	Z+1, r20	; 0x01
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	82 83       	std	Z+2, r24	; 0x02
     8ac:	13 82       	std	Z+3, r1	; 0x03
     8ae:	80 e2       	ldi	r24, 0x20	; 32
     8b0:	84 83       	std	Z+4, r24	; 0x04
     8b2:	15 82       	std	Z+5, r1	; 0x05
     8b4:	16 82       	std	Z+6, r1	; 0x06
     8b6:	10 86       	std	Z+8, r1	; 0x08
     8b8:	11 86       	std	Z+9, r1	; 0x09
     8ba:	12 86       	std	Z+10, r1	; 0x0a
     8bc:	13 86       	std	Z+11, r1	; 0x0b
     8be:	14 86       	std	Z+12, r1	; 0x0c
     8c0:	15 86       	std	Z+13, r1	; 0x0d
     8c2:	16 86       	std	Z+14, r1	; 0x0e
     8c4:	17 86       	std	Z+15, r1	; 0x0f
     8c6:	08 95       	ret

000008c8 <_ZN4RF2410setChannelEh>:
}

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     8c8:	46 2f       	mov	r20, r22
  // TODO: This method could take advantage of the 'wide_band' calculation
  // done in setChannel() to require certain channel spacing.

  const uint8_t max_channel = 127;
  write_register(RF_CH,min(channel,max_channel));
     8ca:	60 38       	cpi	r22, 0x80	; 128
     8cc:	08 f0       	brcs	.+2      	; 0x8d0 <_ZN4RF2410setChannelEh+0x8>
     8ce:	4f e7       	ldi	r20, 0x7F	; 127
     8d0:	65 e0       	ldi	r22, 0x05	; 5
     8d2:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

000008d6 <_ZN4RF2414startListeningEv>:
}

/****************************************************************************/

void RF24::startListening(void)
{
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	ec 01       	movw	r28, r24
  write_register(CONFIG, read_register(CONFIG) | _BV(PWR_UP) | _BV(PRIM_RX));
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
     8e2:	48 2f       	mov	r20, r24
     8e4:	43 60       	ori	r20, 0x03	; 3
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	ce 01       	movw	r24, r28
     8ea:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>
  write_register(STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     8ee:	40 e7       	ldi	r20, 0x70	; 112
     8f0:	67 e0       	ldi	r22, 0x07	; 7
     8f2:	ce 01       	movw	r24, r28
     8f4:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

  // Restore the pipe0 adddress, if exists
  if (pipe0_reading_address)
     8f8:	28 85       	ldd	r18, Y+8	; 0x08
     8fa:	39 85       	ldd	r19, Y+9	; 0x09
     8fc:	4a 85       	ldd	r20, Y+10	; 0x0a
     8fe:	5b 85       	ldd	r21, Y+11	; 0x0b
     900:	6c 85       	ldd	r22, Y+12	; 0x0c
     902:	7d 85       	ldd	r23, Y+13	; 0x0d
     904:	8e 85       	ldd	r24, Y+14	; 0x0e
     906:	9f 85       	ldd	r25, Y+15	; 0x0f
     908:	a0 e0       	ldi	r26, 0x00	; 0
     90a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__cmpdi2_s8>
     90e:	41 f0       	breq	.+16     	; 0x920 <__stack+0x21>
    write_register(RX_ADDR_P0, reinterpret_cast<const uint8_t*>(&pipe0_reading_address), 5);
     910:	ae 01       	movw	r20, r28
     912:	48 5f       	subi	r20, 0xF8	; 248
     914:	5f 4f       	sbci	r21, 0xFF	; 255
     916:	25 e0       	ldi	r18, 0x05	; 5
     918:	6a e0       	ldi	r22, 0x0A	; 10
     91a:	ce 01       	movw	r24, r28
     91c:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN4RF2414write_registerEhPKhh>

  // Flush buffers
  flush_rx();
     920:	ce 01       	movw	r24, r28
     922:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN4RF248flush_rxEv>
  flush_tx();
     926:	ce 01       	movw	r24, r28
     928:	0e 94 1b 03 	call	0x636	; 0x636 <_ZN4RF248flush_txEv>

  // Go!
  ce(HIGH);
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	ce 01       	movw	r24, r28
     932:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN4RF242ceEi>

  // wait for the radio to come up (130us actually only needed)
  delayMicroseconds(130);
     936:	82 e8       	ldi	r24, 0x82	; 130
     938:	90 e0       	ldi	r25, 0x00	; 0
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28

  // Go!
  ce(HIGH);

  // wait for the radio to come up (130us actually only needed)
  delayMicroseconds(130);
     93e:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <delayMicroseconds>

00000942 <_ZN4RF2413stopListeningEv>:
}

/****************************************************************************/

void RF24::stopListening(void)
{
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	ec 01       	movw	r28, r24
  ce(LOW);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN4RF242ceEi>
  flush_tx();
     950:	ce 01       	movw	r24, r28
     952:	0e 94 1b 03 	call	0x636	; 0x636 <_ZN4RF248flush_txEv>
  flush_rx();
     956:	ce 01       	movw	r24, r28
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28

void RF24::stopListening(void)
{
  ce(LOW);
  flush_tx();
  flush_rx();
     95c:	0c 94 05 03 	jmp	0x60a	; 0x60a <_ZN4RF248flush_rxEv>

00000960 <_ZN4RF2410startWriteEPKvhb>:
  return result;
}
/****************************************************************************/

void RF24::startWrite( const void* buf, uint8_t len, const bool multicast )
{
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	1f 92       	push	r1
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	6c 01       	movw	r12, r24
     976:	8b 01       	movw	r16, r22
     978:	f4 2e       	mov	r15, r20
  // Transmitter power-up
  write_register(CONFIG, ( read_register(CONFIG) | _BV(PWR_UP) ) & ~_BV(PRIM_RX) );
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	29 83       	std	Y+1, r18	; 0x01
     97e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
     982:	48 2f       	mov	r20, r24
     984:	4c 7f       	andi	r20, 0xFC	; 252
     986:	42 60       	ori	r20, 0x02	; 2
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	c6 01       	movw	r24, r12
     98c:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>
  delayMicroseconds(150);
     990:	86 e9       	ldi	r24, 0x96	; 150
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 b1 0c 	call	0x1962	; 0x1962 <delayMicroseconds>


  // Send the payload - Unicast (W_TX_PAYLOAD) or multicast (W_TX_PAYLOAD_NO_ACK)
  write_payload( buf, len,
		 multicast?static_cast<uint8_t>(W_TX_PAYLOAD_NO_ACK):static_cast<uint8_t>(W_TX_PAYLOAD) ) ;
     998:	29 81       	ldd	r18, Y+1	; 0x01
     99a:	22 23       	and	r18, r18
     99c:	11 f0       	breq	.+4      	; 0x9a2 <_ZN4RF2410startWriteEPKvhb+0x42>
     99e:	20 eb       	ldi	r18, 0xB0	; 176
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <_ZN4RF2410startWriteEPKvhb+0x44>
     9a2:	20 ea       	ldi	r18, 0xA0	; 160
     9a4:	4f 2d       	mov	r20, r15
     9a6:	b8 01       	movw	r22, r16
     9a8:	c6 01       	movw	r24, r12
     9aa:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF2413write_payloadEPKvhh>

  // Allons!
  ce(HIGH);
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	c6 01       	movw	r24, r12
     9b4:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN4RF242ceEi>
  delayMicroseconds(10);
     9b8:	8a e0       	ldi	r24, 0x0A	; 10
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 b1 0c 	call	0x1962	; 0x1962 <delayMicroseconds>

  ce(LOW);
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	c6 01       	movw	r24, r12
}
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12

  // Allons!
  ce(HIGH);
  delayMicroseconds(10);

  ce(LOW);
     9d6:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_ZN4RF242ceEi>

000009da <_ZN4RF2421getDynamicPayloadSizeEv>:
}

/****************************************************************************/

uint8_t RF24::getDynamicPayloadSize(void)
{
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	ec 01       	movw	r28, r24
  uint8_t result = 0;

  csn(LOW);
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  SPI.transfer( R_RX_PL_WID );
     9ea:	80 e6       	ldi	r24, 0x60	; 96
     9ec:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
  result = SPI.transfer(0xff);
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN8SPIClass8transferEh>
     9f6:	18 2f       	mov	r17, r24
  csn(HIGH);
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	ce 01       	movw	r24, r28
     9fe:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>

  return result;
}
     a02:	81 2f       	mov	r24, r17
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	08 95       	ret

00000a0c <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
     a1a:	8b 01       	movw	r16, r22
  uint8_t status = get_status();
     a1c:	0e 94 31 03 	call	0x662	; 0x662 <_ZN4RF2410get_statusEv>
     a20:	f8 2e       	mov	r15, r24
  // Too noisy, enable if you really want lots o data!!
  //IF_SERIAL_DEBUG(print_status(status));

  bool result = ( status & _BV(RX_DR) );

  if (result)
     a22:	86 fb       	bst	r24, 6
     a24:	ee 24       	eor	r14, r14
     a26:	e0 f8       	bld	r14, 0
     a28:	86 ff       	sbrs	r24, 6
     a2a:	17 c0       	rjmp	.+46     	; 0xa5a <_ZN4RF249availableEPh+0x4e>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
     a2c:	01 15       	cp	r16, r1
     a2e:	11 05       	cpc	r17, r1
     a30:	41 f0       	breq	.+16     	; 0xa42 <_ZN4RF249availableEPh+0x36>
      *pipe_num = ( status >> RX_P_NO ) & B111;
     a32:	28 2f       	mov	r18, r24
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	35 95       	asr	r19
     a38:	27 95       	ror	r18
     a3a:	27 70       	andi	r18, 0x07	; 7
     a3c:	33 27       	eor	r19, r19
     a3e:	f8 01       	movw	r30, r16
     a40:	20 83       	st	Z, r18
    // Clear the status bit

    // ??? Should this REALLY be cleared now?  Or wait until we
    // actually READ the payload?

    write_register(STATUS,_BV(RX_DR) );
     a42:	40 e4       	ldi	r20, 0x40	; 64
     a44:	67 e0       	ldi	r22, 0x07	; 7
     a46:	ce 01       	movw	r24, r28
     a48:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

    // Handle ack payload receipt
    if ( status & _BV(TX_DS) )
     a4c:	f5 fe       	sbrs	r15, 5
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <_ZN4RF249availableEPh+0x4e>
    {
      write_register(STATUS,_BV(TX_DS));
     a50:	40 e2       	ldi	r20, 0x20	; 32
     a52:	67 e0       	ldi	r22, 0x07	; 7
     a54:	ce 01       	movw	r24, r28
     a56:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>
    }
  }

  return result;
}
     a5a:	8e 2d       	mov	r24, r14
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	08 95       	ret

00000a6a <_ZN4RF249availableEv>:

/****************************************************************************/

bool RF24::available(void)
{
  return available(NULL);
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <_ZN4RF249availableEPh>

00000a72 <_ZN4RF244readEPvh>:
}

/****************************************************************************/

bool RF24::read( void* buf, uint8_t len )
{
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ec 01       	movw	r28, r24
  // Fetch the payload
  read_payload( buf, len );
     a78:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN4RF2412read_payloadEPvh>

  // was this the last of the data available?
  return read_register(FIFO_STATUS) & _BV(RX_EMPTY);
     a7c:	67 e1       	ldi	r22, 0x17	; 23
     a7e:	ce 01       	movw	r24, r28
     a80:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
}
     a84:	81 70       	andi	r24, 0x01	; 1
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <_ZN4RF2412whatHappenedERbS0_S0_>:

/****************************************************************************/

void RF24::whatHappened(bool& tx_ok,bool& tx_fail,bool& rx_ready)
{
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	eb 01       	movw	r28, r22
     a9a:	8a 01       	movw	r16, r20
     a9c:	79 01       	movw	r14, r18
  // Read the status & reset the status in one easy call
  // Or is that such a good idea?
  uint8_t status = write_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     a9e:	40 e7       	ldi	r20, 0x70	; 112
     aa0:	67 e0       	ldi	r22, 0x07	; 7
     aa2:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

  // Report to the user what happened
  tx_ok = status & _BV(TX_DS);
     aa6:	85 fb       	bst	r24, 5
     aa8:	99 27       	eor	r25, r25
     aaa:	90 f9       	bld	r25, 0
     aac:	98 83       	st	Y, r25
  tx_fail = status & _BV(MAX_RT);
     aae:	84 fb       	bst	r24, 4
     ab0:	99 27       	eor	r25, r25
     ab2:	90 f9       	bld	r25, 0
     ab4:	f8 01       	movw	r30, r16
     ab6:	90 83       	st	Z, r25
  rx_ready = status & _BV(RX_DR);
     ab8:	86 fb       	bst	r24, 6
     aba:	88 27       	eor	r24, r24
     abc:	80 f9       	bld	r24, 0
     abe:	f7 01       	movw	r30, r14
     ac0:	80 83       	st	Z, r24
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	08 95       	ret

00000ad0 <_ZN4RF2415openWritingPipeEy>:

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	28 97       	sbiw	r28, 0x08	; 8
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	7c 01       	movw	r14, r24
     aee:	09 83       	std	Y+1, r16	; 0x01
     af0:	1a 83       	std	Y+2, r17	; 0x02
     af2:	2b 83       	std	Y+3, r18	; 0x03
     af4:	3c 83       	std	Y+4, r19	; 0x04
     af6:	4d 83       	std	Y+5, r20	; 0x05
     af8:	5e 83       	std	Y+6, r21	; 0x06
     afa:	6f 83       	std	Y+7, r22	; 0x07
     afc:	78 87       	std	Y+8, r23	; 0x08
  // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
  // expects it LSB first too, so we're good.

  write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), 5);
     afe:	25 e0       	ldi	r18, 0x05	; 5
     b00:	ae 01       	movw	r20, r28
     b02:	4f 5f       	subi	r20, 0xFF	; 255
     b04:	5f 4f       	sbci	r21, 0xFF	; 255
     b06:	6a e0       	ldi	r22, 0x0A	; 10
     b08:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN4RF2414write_registerEhPKhh>
  write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), 5);
     b0c:	25 e0       	ldi	r18, 0x05	; 5
     b0e:	ae 01       	movw	r20, r28
     b10:	4f 5f       	subi	r20, 0xFF	; 255
     b12:	5f 4f       	sbci	r21, 0xFF	; 255
     b14:	60 e1       	ldi	r22, 0x10	; 16
     b16:	c7 01       	movw	r24, r14
     b18:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN4RF2414write_registerEhPKhh>

  const uint8_t max_payload_size = 32;
  write_register(RX_PW_P0,min(payload_size,max_payload_size));
     b1c:	f7 01       	movw	r30, r14
     b1e:	44 81       	ldd	r20, Z+4	; 0x04
     b20:	41 32       	cpi	r20, 0x21	; 33
     b22:	08 f0       	brcs	.+2      	; 0xb26 <_ZN4RF2415openWritingPipeEy+0x56>
     b24:	40 e2       	ldi	r20, 0x20	; 32
     b26:	61 e1       	ldi	r22, 0x11	; 17
     b28:	c7 01       	movw	r24, r14
     b2a:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>
}
     b2e:	28 96       	adiw	r28, 0x08	; 8
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	08 95       	ret

00000b48 <_ZN4RF2415openReadingPipeEhy>:
{
  ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5
};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	28 97       	sbiw	r28, 0x08	; 8
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	6c 01       	movw	r12, r24
     b6c:	b6 2e       	mov	r11, r22
     b6e:	e9 82       	std	Y+1, r14	; 0x01
     b70:	fa 82       	std	Y+2, r15	; 0x02
     b72:	0b 83       	std	Y+3, r16	; 0x03
     b74:	1c 83       	std	Y+4, r17	; 0x04
     b76:	2d 83       	std	Y+5, r18	; 0x05
     b78:	3e 83       	std	Y+6, r19	; 0x06
     b7a:	4f 83       	std	Y+7, r20	; 0x07
     b7c:	58 87       	std	Y+8, r21	; 0x08
  // If this is pipe 0, cache the address.  This is needed because
  // openWritingPipe() will overwrite the pipe 0 address, so
  // startListening() will have to restore it.
  if (child == 0)
     b7e:	61 11       	cpse	r22, r1
     b80:	0a c0       	rjmp	.+20     	; 0xb96 <_ZN4RF2415openReadingPipeEhy+0x4e>
    pipe0_reading_address = address;
     b82:	f6 01       	movw	r30, r12
     b84:	e0 86       	std	Z+8, r14	; 0x08
     b86:	f1 86       	std	Z+9, r15	; 0x09
     b88:	02 87       	std	Z+10, r16	; 0x0a
     b8a:	13 87       	std	Z+11, r17	; 0x0b
     b8c:	24 87       	std	Z+12, r18	; 0x0c
     b8e:	35 87       	std	Z+13, r19	; 0x0d
     b90:	46 87       	std	Z+14, r20	; 0x0e
     b92:	57 87       	std	Z+15, r21	; 0x0f
     b94:	07 c0       	rjmp	.+14     	; 0xba4 <_ZN4RF2415openReadingPipeEhy+0x5c>

  if (child <= 6)
     b96:	f6 e0       	ldi	r31, 0x06	; 6
     b98:	f6 17       	cp	r31, r22
     b9a:	08 f4       	brcc	.+2      	; 0xb9e <_ZN4RF2415openReadingPipeEhy+0x56>
     b9c:	34 c0       	rjmp	.+104    	; 0xc06 <_ZN4RF2415openReadingPipeEhy+0xbe>
  {
    // For pipes 2-5, only write the LSB
    if ( child < 2 )
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	68 13       	cpse	r22, r24
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <_ZN4RF2415openReadingPipeEhy+0x6a>
      write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 5);
     ba4:	eb 2d       	mov	r30, r11
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	e3 54       	subi	r30, 0x43	; 67
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	64 91       	lpm	r22, Z+
     bae:	25 e0       	ldi	r18, 0x05	; 5
     bb0:	06 c0       	rjmp	.+12     	; 0xbbe <_ZN4RF2415openReadingPipeEhy+0x76>
    else
      write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
     bb2:	e6 2f       	mov	r30, r22
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	e3 54       	subi	r30, 0x43	; 67
     bb8:	fe 4f       	sbci	r31, 0xFE	; 254
     bba:	64 91       	lpm	r22, Z+
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	ae 01       	movw	r20, r28
     bc0:	4f 5f       	subi	r20, 0xFF	; 255
     bc2:	5f 4f       	sbci	r21, 0xFF	; 255
     bc4:	c6 01       	movw	r24, r12
     bc6:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN4RF2414write_registerEhPKhh>

    write_register(pgm_read_byte(&child_payload_size[child]),payload_size);
     bca:	0b 2d       	mov	r16, r11
     bcc:	10 e0       	ldi	r17, 0x00	; 0
     bce:	f8 01       	movw	r30, r16
     bd0:	ed 53       	subi	r30, 0x3D	; 61
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	64 91       	lpm	r22, Z+
     bd6:	f6 01       	movw	r30, r12
     bd8:	44 81       	ldd	r20, Z+4	; 0x04
     bda:	c6 01       	movw	r24, r12
     bdc:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

    // Note it would be more efficient to set all of the bits for all open
    // pipes at once.  However, I thought it would make the calling code
    // more simple to do it this way.
    write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
     be0:	62 e0       	ldi	r22, 0x02	; 2
     be2:	c6 01       	movw	r24, r12
     be4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
     be8:	f8 01       	movw	r30, r16
     bea:	e7 53       	subi	r30, 0x37	; 55
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	04 91       	lpm	r16, Z+
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <_ZN4RF2415openReadingPipeEhy+0xb0>
     bf6:	44 0f       	add	r20, r20
     bf8:	0a 95       	dec	r16
     bfa:	ea f7       	brpl	.-6      	; 0xbf6 <_ZN4RF2415openReadingPipeEhy+0xae>
     bfc:	48 2b       	or	r20, r24
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	c6 01       	movw	r24, r12
     c02:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>
  }
}
     c06:	28 96       	adiw	r28, 0x08	; 8
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	08 95       	ret

00000c26 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e>:
}

/****************************************************************************/

void RF24::setPALevel(rf24_pa_dbm_e level)
{
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	8c 01       	movw	r16, r24
     c30:	eb 01       	movw	r28, r22
  uint8_t setup = read_register(RF_SETUP) ;
     c32:	66 e0       	ldi	r22, 0x06	; 6
     c34:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
     c38:	48 2f       	mov	r20, r24
     c3a:	49 7f       	andi	r20, 0xF9	; 249

  // switch uses RAM (evil!)
  if ( level == RF24_PA_MAX )
     c3c:	c3 30       	cpi	r28, 0x03	; 3
     c3e:	d1 05       	cpc	r29, r1
     c40:	09 f4       	brne	.+2      	; 0xc44 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x1e>
     c42:	0e c0       	rjmp	.+28     	; 0xc60 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x3a>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
  }
  else if ( level == RF24_PA_HIGH )
     c44:	c2 30       	cpi	r28, 0x02	; 2
     c46:	d1 05       	cpc	r29, r1
     c48:	11 f4       	brne	.+4      	; 0xc4e <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x28>
  {
    setup |= _BV(RF_PWR_HIGH) ;
     c4a:	44 60       	ori	r20, 0x04	; 4
     c4c:	0a c0       	rjmp	.+20     	; 0xc62 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x3c>
  }
  else if ( level == RF24_PA_LOW )
     c4e:	c1 30       	cpi	r28, 0x01	; 1
     c50:	d1 05       	cpc	r29, r1
     c52:	11 f4       	brne	.+4      	; 0xc58 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x32>
  {
    setup |= _BV(RF_PWR_LOW);
     c54:	42 60       	ori	r20, 0x02	; 2
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x3c>
  }
  else if ( level == RF24_PA_MIN )
     c58:	20 97       	sbiw	r28, 0x00	; 0
     c5a:	19 f0       	breq	.+6      	; 0xc62 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x3c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
     c5c:	24 97       	sbiw	r28, 0x04	; 4
     c5e:	09 f4       	brne	.+2      	; 0xc62 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x3c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
     c60:	46 60       	ori	r20, 0x06	; 6
  }

  write_register( RF_SETUP, setup ) ;
     c62:	66 e0       	ldi	r22, 0x06	; 6
     c64:	c8 01       	movw	r24, r16
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
  }

  write_register( RF_SETUP, setup ) ;
     c6e:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

00000c72 <_ZN4RF2410getPALevelEv>:
/****************************************************************************/

rf24_pa_dbm_e RF24::getPALevel(void)
{
  rf24_pa_dbm_e result = RF24_PA_ERROR ;
  uint8_t power = read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
     c72:	66 e0       	ldi	r22, 0x06	; 6
     c74:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
     c78:	86 70       	andi	r24, 0x06	; 6

  // switch uses RAM (evil!)
  if ( power == (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) )
     c7a:	86 30       	cpi	r24, 0x06	; 6
     c7c:	49 f0       	breq	.+18     	; 0xc90 <_ZN4RF2410getPALevelEv+0x1e>
  {
    result = RF24_PA_MAX ;
  }
  else if ( power == _BV(RF_PWR_HIGH) )
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	51 f0       	breq	.+20     	; 0xc96 <_ZN4RF2410getPALevelEv+0x24>
  {
    result = RF24_PA_HIGH ;
  }
  else if ( power == _BV(RF_PWR_LOW) )
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	41 f0       	breq	.+16     	; 0xc9a <_ZN4RF2410getPALevelEv+0x28>
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <_ZN4RF2410getPALevelEv+0x28>
  uint8_t power = read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;

  // switch uses RAM (evil!)
  if ( power == (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) )
  {
    result = RF24_PA_MAX ;
     c90:	23 e0       	ldi	r18, 0x03	; 3
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <_ZN4RF2410getPALevelEv+0x28>
  }
  else if ( power == _BV(RF_PWR_HIGH) )
  {
    result = RF24_PA_HIGH ;
     c96:	22 e0       	ldi	r18, 0x02	; 2
     c98:	30 e0       	ldi	r19, 0x00	; 0
  {
    result = RF24_PA_MIN ;
  }

  return result ;
}
     c9a:	c9 01       	movw	r24, r18
     c9c:	08 95       	ret

00000c9e <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	1f 92       	push	r1
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	7c 01       	movw	r14, r24
     cb2:	8b 01       	movw	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     cb4:	66 e0       	ldi	r22, 0x06	; 6
     cb6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
     cba:	f7 01       	movw	r30, r14
     cbc:	12 82       	std	Z+2, r1	; 0x02
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     cbe:	28 2f       	mov	r18, r24
     cc0:	27 7d       	andi	r18, 0xD7	; 215
  if( speed == RF24_250KBPS )
     cc2:	02 30       	cpi	r16, 0x02	; 2
     cc4:	11 05       	cpc	r17, r1
     cc6:	11 f4       	brne	.+4      	; 0xccc <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
    setup |= _BV( RF_DR_LOW ) ;
     cc8:	20 62       	ori	r18, 0x20	; 32
     cca:	07 c0       	rjmp	.+14     	; 0xcda <_ZN4RF2411setDataRateE15rf24_datarate_e+0x3c>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     ccc:	01 30       	cpi	r16, 0x01	; 1
     cce:	11 05       	cpc	r17, r1
     cd0:	21 f4       	brne	.+8      	; 0xcda <_ZN4RF2411setDataRateE15rf24_datarate_e+0x3c>
    {
      wide_band = true ;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	f7 01       	movw	r30, r14
     cd6:	82 83       	std	Z+2, r24	; 0x02
      setup |= _BV(RF_DR_HIGH);
     cd8:	28 60       	ori	r18, 0x08	; 8
    {
      // 1Mbs
      wide_band = false ;
    }
  }
  write_register(RF_SETUP,setup);
     cda:	42 2f       	mov	r20, r18
     cdc:	66 e0       	ldi	r22, 0x06	; 6
     cde:	c7 01       	movw	r24, r14
     ce0:	29 83       	std	Y+1, r18	; 0x01
     ce2:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     ce6:	66 e0       	ldi	r22, 0x06	; 6
     ce8:	c7 01       	movw	r24, r14
     cea:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
     cee:	29 81       	ldd	r18, Y+1	; 0x01
     cf0:	82 17       	cp	r24, r18
     cf2:	21 f0       	breq	.+8      	; 0xcfc <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5e>
  {
    result = true;
  }
  else
  {
    wide_band = false;
     cf4:	f7 01       	movw	r30, r14
     cf6:	12 82       	std	Z+2, r1	; 0x02

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <_ZN4RF2411setDataRateE15rf24_datarate_e+0x60>
  write_register(RF_SETUP,setup);

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
  {
    result = true;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
  {
    wide_band = false;
  }

  return result;
}
     cfe:	0f 90       	pop	r0
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <_ZN4RF2411getDataRateEv>:
/****************************************************************************/

rf24_datarate_e RF24::getDataRate( void )
{
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
     d0e:	66 e0       	ldi	r22, 0x06	; 6
     d10:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
     d14:	88 72       	andi	r24, 0x28	; 40
  
  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
     d16:	80 32       	cpi	r24, 0x20	; 32
     d18:	39 f0       	breq	.+14     	; 0xd28 <_ZN4RF2411getDataRateEv+0x1a>
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
  }
  else if ( dr == _BV(RF_DR_HIGH) )
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	88 30       	cpi	r24, 0x08	; 8
     d20:	29 f0       	breq	.+10     	; 0xd2c <_ZN4RF2411getDataRateEv+0x1e>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <_ZN4RF2411getDataRateEv+0x1e>
  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
     d28:	22 e0       	ldi	r18, 0x02	; 2
     d2a:	30 e0       	ldi	r19, 0x00	; 0
  {
    // '00' = 1MBPS
    result = RF24_1MBPS ;
  }
  return result ;
}
     d2c:	c9 01       	movw	r24, r18
     d2e:	08 95       	ret

00000d30 <_ZN4RF2412setCRCLengthE16rf24_crclength_e>:

/****************************************************************************/

void RF24::setCRCLength(rf24_crclength_e length)
{
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
     d3a:	8b 01       	movw	r16, r22
  uint8_t config = read_register(CONFIG) & ~( _BV(CRCO) | _BV(EN_CRC)) ;
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>
     d42:	48 2f       	mov	r20, r24
     d44:	43 7f       	andi	r20, 0xF3	; 243
  
  // switch uses RAM (evil!)
  if ( length == RF24_CRC_DISABLED )
     d46:	01 15       	cp	r16, r1
     d48:	11 05       	cpc	r17, r1
     d4a:	31 f0       	breq	.+12     	; 0xd58 <_ZN4RF2412setCRCLengthE16rf24_crclength_e+0x28>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
     d4c:	01 30       	cpi	r16, 0x01	; 1
     d4e:	11 05       	cpc	r17, r1
     d50:	11 f4       	brne	.+4      	; 0xd56 <_ZN4RF2412setCRCLengthE16rf24_crclength_e+0x26>
  {
    config |= _BV(EN_CRC);
     d52:	48 60       	ori	r20, 0x08	; 8
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <_ZN4RF2412setCRCLengthE16rf24_crclength_e+0x28>
  }
  else
  {
    config |= _BV(EN_CRC);
    config |= _BV( CRCO );
     d56:	4c 60       	ori	r20, 0x0C	; 12
  }
  write_register( CONFIG, config ) ;
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	ce 01       	movw	r24, r28
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
  else
  {
    config |= _BV(EN_CRC);
    config |= _BV( CRCO );
  }
  write_register( CONFIG, config ) ;
     d64:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

00000d68 <_ZN4RF245beginEv>:
}

/****************************************************************************/

void RF24::begin(void)
{
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	ec 01       	movw	r28, r24
  // Initialize pins
  pinMode(ce_pin,OUTPUT);
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	88 81       	ld	r24, Y
     d72:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>
  pinMode(csn_pin,OUTPUT);
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>

  // Initialize SPI bus
  SPI.begin();
     d7e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN8SPIClass5beginEv>

  ce(LOW);
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	ce 01       	movw	r24, r28
     d88:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN4RF242ceEi>
  csn(HIGH);
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	ce 01       	movw	r24, r28
     d92:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN4RF243csnEi>
  // This is actually only required following power up but some settling time also appears to
  // be required after resets too. For full coverage, we'll always assume the worst.
  // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
  delay( 5 ) ;
     d96:	65 e0       	ldi	r22, 0x05	; 5
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <delay>

  // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
  // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
  // sizes must never be used. See documentation for a more complete explanation.
  write_register(SETUP_RETR,(B0101 << ARD) | (B1111 << ARC));
     da2:	4f e5       	ldi	r20, 0x5F	; 95
     da4:	64 e0       	ldi	r22, 0x04	; 4
     da6:	ce 01       	movw	r24, r28
     da8:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

  // Restore our default PA level
  setPALevel( RF24_PA_MAX ) ;
     dac:	63 e0       	ldi	r22, 0x03	; 3
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	ce 01       	movw	r24, r28
     db2:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( setDataRate( RF24_250KBPS ) )
     db6:	62 e0       	ldi	r22, 0x02	; 2
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	ce 01       	movw	r24, r28
     dbc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_ZN4RF2411setDataRateE15rf24_datarate_e>
     dc0:	88 23       	and	r24, r24
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <_ZN4RF245beginEv+0x60>
  {
    p_variant = true ;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	8b 83       	std	Y+3, r24	; 0x03
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	ce 01       	movw	r24, r28
     dce:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  setCRCLength( RF24_CRC_16 ) ;
     dd2:	62 e0       	ldi	r22, 0x02	; 2
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	ce 01       	movw	r24, r28
     dd8:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZN4RF2412setCRCLengthE16rf24_crclength_e>
  
  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  write_register(DYNPD,0);
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	6c e1       	ldi	r22, 0x1C	; 28
     de0:	ce 01       	movw	r24, r28
     de2:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     de6:	40 e7       	ldi	r20, 0x70	; 112
     de8:	67 e0       	ldi	r22, 0x07	; 7
     dea:	ce 01       	movw	r24, r28
     dec:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     df0:	6c e4       	ldi	r22, 0x4C	; 76
     df2:	ce 01       	movw	r24, r28
     df4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     df8:	ce 01       	movw	r24, r28
     dfa:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN4RF248flush_rxEv>
  flush_tx();
     dfe:	ce 01       	movw	r24, r28
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
  // spectrum.
  setChannel(76);

  // Flush buffers
  flush_rx();
  flush_tx();
     e04:	0c 94 1b 03 	jmp	0x636	; 0x636 <_ZN4RF248flush_txEv>

00000e08 <_ZN4RF2412getCRCLengthEv>:
/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
  uint8_t config = read_register(CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>

  if ( config & _BV(EN_CRC ) )
     e0e:	83 ff       	sbrs	r24, 3
     e10:	05 c0       	rjmp	.+10     	; 0xe1c <_ZN4RF2412getCRCLengthEv+0x14>
  {
    if ( config & _BV(CRCO) )
     e12:	82 ff       	sbrs	r24, 2
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <_ZN4RF2412getCRCLengthEv+0x1a>
      result = RF24_CRC_16;
     e16:	22 e0       	ldi	r18, 0x02	; 2
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <_ZN4RF2412getCRCLengthEv+0x1e>

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <_ZN4RF2412getCRCLengthEv+0x1e>
  if ( config & _BV(EN_CRC ) )
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	30 e0       	ldi	r19, 0x00	; 0
  }

  return result;
}
     e26:	c9 01       	movw	r24, r18
     e28:	08 95       	ret

00000e2a <_ZN4RF2412printDetailsEv>:
  rf24_pa_dbm_e_str_2,
  rf24_pa_dbm_e_str_3,
};

void RF24::printDetails(void)
{
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
  print_status(get_status());
     e30:	0e 94 31 03 	call	0x662	; 0x662 <_ZN4RF2410get_statusEv>
     e34:	68 2f       	mov	r22, r24
     e36:	ce 01       	movw	r24, r28
     e38:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN4RF2412print_statusEh>

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
     e3c:	22 e0       	ldi	r18, 0x02	; 2
     e3e:	4a e0       	ldi	r20, 0x0A	; 10
     e40:	6f ef       	ldi	r22, 0xFF	; 255
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	ce 01       	movw	r24, r28
     e46:	0e 94 cb 03 	call	0x796	; 0x796 <_ZN4RF2422print_address_registerEPKchh>
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
     e4a:	24 e0       	ldi	r18, 0x04	; 4
     e4c:	4c e0       	ldi	r20, 0x0C	; 12
     e4e:	6c e0       	ldi	r22, 0x0C	; 12
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	ce 01       	movw	r24, r28
     e54:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN4RF2419print_byte_registerEPKchh>
  print_address_register(PSTR("TX_ADDR"),TX_ADDR);
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	40 e1       	ldi	r20, 0x10	; 16
     e5c:	69 e1       	ldi	r22, 0x19	; 25
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	ce 01       	movw	r24, r28
     e62:	0e 94 cb 03 	call	0x796	; 0x796 <_ZN4RF2422print_address_registerEPKchh>

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
     e66:	26 e0       	ldi	r18, 0x06	; 6
     e68:	41 e1       	ldi	r20, 0x11	; 17
     e6a:	61 e2       	ldi	r22, 0x21	; 33
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("EN_AA"),EN_AA);
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	6c e2       	ldi	r22, 0x2C	; 44
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	42 e0       	ldi	r20, 0x02	; 2
     e86:	62 e3       	ldi	r22, 0x32	; 50
     e88:	71 e0       	ldi	r23, 0x01	; 1
     e8a:	ce 01       	movw	r24, r28
     e8c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("RF_CH"),RF_CH);
     e90:	21 e0       	ldi	r18, 0x01	; 1
     e92:	45 e0       	ldi	r20, 0x05	; 5
     e94:	6c e3       	ldi	r22, 0x3C	; 60
     e96:	71 e0       	ldi	r23, 0x01	; 1
     e98:	ce 01       	movw	r24, r28
     e9a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
     e9e:	21 e0       	ldi	r18, 0x01	; 1
     ea0:	46 e0       	ldi	r20, 0x06	; 6
     ea2:	62 e4       	ldi	r22, 0x42	; 66
     ea4:	71 e0       	ldi	r23, 0x01	; 1
     ea6:	ce 01       	movw	r24, r28
     ea8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("CONFIG"),CONFIG);
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	6b e4       	ldi	r22, 0x4B	; 75
     eb2:	71 e0       	ldi	r23, 0x01	; 1
     eb4:	ce 01       	movw	r24, r28
     eb6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
     eba:	22 e0       	ldi	r18, 0x02	; 2
     ebc:	4c e1       	ldi	r20, 0x1C	; 28
     ebe:	62 e5       	ldi	r22, 0x52	; 82
     ec0:	71 e0       	ldi	r23, 0x01	; 1
     ec2:	ce 01       	movw	r24, r28
     ec4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN4RF2419print_byte_registerEPKchh>

  printf_P(PSTR("Data Rate\t = %S\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
     ec8:	ce 01       	movw	r24, r28
     eca:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN4RF2411getDataRateEv>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	80 5a       	subi	r24, 0xA0	; 160
     ed4:	9e 4f       	sbci	r25, 0xFE	; 254
     ed6:	fc 01       	movw	r30, r24
     ed8:	85 91       	lpm	r24, Z+
     eda:	94 91       	lpm	r25, Z+
     edc:	9f 93       	push	r25
     ede:	8f 93       	push	r24
     ee0:	86 e6       	ldi	r24, 0x66	; 102
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	9f 93       	push	r25
     ee6:	8f 93       	push	r24
     ee8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
  printf_P(PSTR("Model\t\t = %S\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
     eec:	eb 81       	ldd	r30, Y+3	; 0x03
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	e8 58       	subi	r30, 0x88	; 136
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	85 91       	lpm	r24, Z+
     efa:	94 91       	lpm	r25, Z+
     efc:	9f 93       	push	r25
     efe:	8f 93       	push	r24
     f00:	8c e7       	ldi	r24, 0x7C	; 124
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	9f 93       	push	r25
     f06:	8f 93       	push	r24
     f08:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
  printf_P(PSTR("CRC Length\t = %S\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
     f0c:	ce 01       	movw	r24, r28
     f0e:	0e 94 04 07 	call	0xe08	; 0xe08 <_ZN4RF2412getCRCLengthEv>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	85 57       	subi	r24, 0x75	; 117
     f18:	9e 4f       	sbci	r25, 0xFE	; 254
     f1a:	fc 01       	movw	r30, r24
     f1c:	85 91       	lpm	r24, Z+
     f1e:	94 91       	lpm	r25, Z+
     f20:	9f 93       	push	r25
     f22:	8f 93       	push	r24
     f24:	81 e9       	ldi	r24, 0x91	; 145
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
  printf_P(PSTR("PA Power\t = %S\r\n"),pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
     f30:	ce 01       	movw	r24, r28
     f32:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN4RF2410getPALevelEv>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	8c 55       	subi	r24, 0x5C	; 92
     f3c:	9e 4f       	sbci	r25, 0xFE	; 254
     f3e:	fc 01       	movw	r30, r24
     f40:	85 91       	lpm	r24, Z+
     f42:	94 91       	lpm	r25, Z+
     f44:	9f 93       	push	r25
     f46:	8f 93       	push	r24
     f48:	8c ea       	ldi	r24, 0xAC	; 172
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	9f 93       	push	r25
     f4e:	8f 93       	push	r24
     f50:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <printf_P>
     f54:	8d b7       	in	r24, 0x3d	; 61
     f56:	9e b7       	in	r25, 0x3e	; 62
     f58:	40 96       	adiw	r24, 0x10	; 16
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	9e bf       	out	0x3e, r25	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	8d bf       	out	0x3d, r24	; 61
}
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <_ZN4RF2410setRetriesEhh>:

/****************************************************************************/

void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     f6a:	4f 70       	andi	r20, 0x0F	; 15
     f6c:	20 e1       	ldi	r18, 0x10	; 16
     f6e:	62 9f       	mul	r22, r18
     f70:	b0 01       	movw	r22, r0
     f72:	11 24       	eor	r1, r1
     f74:	46 2b       	or	r20, r22
     f76:	64 e0       	ldi	r22, 0x04	; 4
     f78:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_ZN4RF2414write_registerEhh>

00000f7c <_ZN4RF2410getRetriesEv>:

/****************************************************************************/

uint8_t RF24::getRetries( void )
{
  return read_register( SETUP_RETR ) ;
     f7c:	64 e0       	ldi	r22, 0x04	; 4
     f7e:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_ZN4RF2413read_registerEh>

00000f82 <_ZN4RF2413getMaxTimeoutEv>:

/****************************************************************************/

uint16_t RF24::getMaxTimeout( void )
{
  uint8_t retries = getRetries() ;
     f82:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN4RF2410getRetriesEv>
  uint16_t to = ((250 + (250 * ((retries & 0xf0) >> 4))) * (retries & 0x0f)) ;
     f86:	28 2f       	mov	r18, r24
     f88:	22 95       	swap	r18
     f8a:	2f 70       	andi	r18, 0x0F	; 15
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	9a ef       	ldi	r25, 0xFA	; 250
     f94:	92 9f       	mul	r25, r18
     f96:	a0 01       	movw	r20, r0
     f98:	93 9f       	mul	r25, r19
     f9a:	50 0d       	add	r21, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	8f 70       	andi	r24, 0x0F	; 15
     fa0:	84 9f       	mul	r24, r20
     fa2:	90 01       	movw	r18, r0
     fa4:	85 9f       	mul	r24, r21
     fa6:	30 0d       	add	r19, r0
     fa8:	11 24       	eor	r1, r1

  return to ;
}
     faa:	c9 01       	movw	r24, r18
     fac:	08 95       	ret

00000fae <_ZN4RF245writeEPKvhb>:
}

/******************************************************************/

bool RF24::write( const void* buf, uint8_t len, const bool multicast )
{
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <_ZN4RF245writeEPKvhb+0x1a>
     fc8:	1f 92       	push	r1
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	8c 01       	movw	r16, r24
  bool result = false;

  // Begin the write
  startWrite( buf, len, multicast );
     fd0:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN4RF2410startWriteEPKvhb>

  // IN the end, the send should be blocking.  It comes back in 60ms worst case.
  // Generally much faster.
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = micros();
     fd4:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <micros>
     fd8:	4b 01       	movw	r8, r22
     fda:	5c 01       	movw	r10, r24
  const uint16_t timeout = getMaxTimeout() ; //us to wait for timeout
     fdc:	c8 01       	movw	r24, r16
     fde:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN4RF2413getMaxTimeoutEv>

  // Monitor the send
  do
     fe2:	6c 01       	movw	r12, r24
     fe4:	e1 2c       	mov	r14, r1
     fe6:	f1 2c       	mov	r15, r1
  {
    status = read_register(OBSERVE_TX,&observe_tx,1);
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	ae 01       	movw	r20, r28
     fec:	4d 5f       	subi	r20, 0xFD	; 253
     fee:	5f 4f       	sbci	r21, 0xFF	; 255
     ff0:	68 e0       	ldi	r22, 0x08	; 8
     ff2:	c8 01       	movw	r24, r16
     ff4:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN4RF2413read_registerEhPhh>
    IF_SERIAL_DEBUG(Serial.print(observe_tx,HEX));
  }
  while( ! ( status & ( _BV(TX_DS) | _BV(MAX_RT) ) ) && ( micros() - sent_at < timeout ) );
     ff8:	80 73       	andi	r24, 0x30	; 48
  uint8_t status;
  uint32_t sent_at = micros();
  const uint16_t timeout = getMaxTimeout() ; //us to wait for timeout

  // Monitor the send
  do
     ffa:	91 f4       	brne	.+36     	; 0x1020 <_ZN4RF245writeEPKvhb+0x72>
  {
    status = read_register(OBSERVE_TX,&observe_tx,1);
    IF_SERIAL_DEBUG(Serial.print(observe_tx,HEX));
  }
  while( ! ( status & ( _BV(TX_DS) | _BV(MAX_RT) ) ) && ( micros() - sent_at < timeout ) );
     ffc:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <micros>
  uint8_t status;
  uint32_t sent_at = micros();
  const uint16_t timeout = getMaxTimeout() ; //us to wait for timeout

  // Monitor the send
  do
    1000:	68 19       	sub	r22, r8
    1002:	79 09       	sbc	r23, r9
    1004:	8a 09       	sbc	r24, r10
    1006:	9b 09       	sbc	r25, r11
    1008:	6c 15       	cp	r22, r12
    100a:	7d 05       	cpc	r23, r13
    100c:	8e 05       	cpc	r24, r14
    100e:	9f 05       	cpc	r25, r15
    1010:	58 f3       	brcs	.-42     	; 0xfe8 <_ZN4RF245writeEPKvhb+0x3a>
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <_ZN4RF245writeEPKvhb+0x72>
  IF_SERIAL_DEBUG(Serial.print(result?"...OK.":"...Failed"));

  // Handle the ack packet
  if ( ack_payload_available )
  {
    ack_payload_length = getDynamicPayloadSize();
    1014:	c8 01       	movw	r24, r16
    1016:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN4RF2421getDynamicPayloadSizeEv>
    101a:	f8 01       	movw	r30, r16
    101c:	87 83       	std	Z+7, r24	; 0x07
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <_ZN4RF245writeEPKvhb+0x94>
  // The status tells us three things
  // * The send was successful (TX_DS)
  // * The send failed, too many retries (MAX_RT)
  // * There is an ack packet waiting (RX_DR)
  bool tx_ok, tx_fail;
  whatHappened(tx_ok,tx_fail,ack_payload_available);
    1020:	98 01       	movw	r18, r16
    1022:	2b 5f       	subi	r18, 0xFB	; 251
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	ae 01       	movw	r20, r28
    1028:	4f 5f       	subi	r20, 0xFF	; 255
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	be 01       	movw	r22, r28
    102e:	6e 5f       	subi	r22, 0xFE	; 254
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	c8 01       	movw	r24, r16
    1034:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN4RF2412whatHappenedERbS0_S0_>

  result = tx_ok;
    1038:	fa 80       	ldd	r15, Y+2	; 0x02
  IF_SERIAL_DEBUG(Serial.print(result?"...OK.":"...Failed"));

  // Handle the ack packet
  if ( ack_payload_available )
    103a:	f8 01       	movw	r30, r16
    103c:	85 81       	ldd	r24, Z+5	; 0x05
    103e:	81 11       	cpse	r24, r1
    1040:	e9 cf       	rjmp	.-46     	; 0x1014 <_ZN4RF245writeEPKvhb+0x66>
    IF_SERIAL_DEBUG(Serial.print("[AckPacket]/"));
    IF_SERIAL_DEBUG(Serial.println(ack_payload_length,DEC));
  }

  return result;
}
    1042:	8f 2d       	mov	r24, r15
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	bf 90       	pop	r11
    105c:	af 90       	pop	r10
    105e:	9f 90       	pop	r9
    1060:	8f 90       	pop	r8
    1062:	08 95       	ret

00001064 <_ZN9RoomStateD1Ev>:
RoomState::RoomState() {
	// TODO Auto-generated constructor stub

}

RoomState::~RoomState() {
    1064:	2b e1       	ldi	r18, 0x1B	; 27
    1066:	31 e0       	ldi	r19, 0x01	; 1
    1068:	fc 01       	movw	r30, r24
    106a:	31 83       	std	Z+1, r19	; 0x01
    106c:	20 83       	st	Z, r18
    106e:	08 95       	ret

00001070 <_ZN9RoomStateD0Ev>:
    1070:	2b e1       	ldi	r18, 0x1B	; 27
    1072:	31 e0       	ldi	r19, 0x01	; 1
    1074:	fc 01       	movw	r30, r24
    1076:	31 83       	std	Z+1, r19	; 0x01
    1078:	20 83       	st	Z, r18
	// TODO Auto-generated destructor stub
}
    107a:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <_ZdlPv>

0000107e <_ZN9RoomStateC1Ev>:
 *      Author: colin
 */

#include "RoomState.h"

RoomState::RoomState() {
    107e:	fc 01       	movw	r30, r24
    1080:	8b e1       	ldi	r24, 0x1B	; 27
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	91 83       	std	Z+1, r25	; 0x01
    1086:	80 83       	st	Z, r24
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	82 83       	std	Z+2, r24	; 0x02
    108c:	83 83       	std	Z+3, r24	; 0x03
    108e:	14 82       	std	Z+4, r1	; 0x04
    1090:	15 82       	std	Z+5, r1	; 0x05
    1092:	16 82       	std	Z+6, r1	; 0x06
    1094:	17 82       	std	Z+7, r1	; 0x07
    1096:	08 95       	ret

00001098 <_ZN9RoomState8toStringEPc>:

RoomState::~RoomState() {
	// TODO Auto-generated destructor stub
}

char* RoomState::toString(char* buf) {
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	00 d0       	rcall	.+0      	; 0x109e <_ZN9RoomState8toStringEPc+0x6>
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	fc 01       	movw	r30, r24
	sprintf(buf,"[%02d%02d----]",protocol_version, sensor_id);
    10a4:	83 81       	ldd	r24, Z+3	; 0x03
    10a6:	1f 92       	push	r1
    10a8:	8f 93       	push	r24
    10aa:	82 81       	ldd	r24, Z+2	; 0x02
    10ac:	1f 92       	push	r1
    10ae:	8f 93       	push	r24
    10b0:	28 e0       	ldi	r18, 0x08	; 8
    10b2:	31 e0       	ldi	r19, 0x01	; 1
    10b4:	3f 93       	push	r19
    10b6:	2f 93       	push	r18
    10b8:	7f 93       	push	r23
    10ba:	6f 93       	push	r22
    10bc:	69 83       	std	Y+1, r22	; 0x01
    10be:	7a 83       	std	Y+2, r23	; 0x02
    10c0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <sprintf>
	return buf;
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
}
    10ce:	69 81       	ldd	r22, Y+1	; 0x01
    10d0:	86 2f       	mov	r24, r22
    10d2:	7a 81       	ldd	r23, Y+2	; 0x02
    10d4:	97 2f       	mov	r25, r23
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <_Z11serial_putccP6__file>:
#define __PRINTF_H__

#ifdef ARDUINO

int serial_putc( char c, FILE * )
{
    10e0:	cf 93       	push	r28
    10e2:	c8 2f       	mov	r28, r24
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    10e4:	e0 91 fc 01 	lds	r30, 0x01FC
    10e8:	f0 91 fd 01 	lds	r31, 0x01FD
    10ec:	01 90       	ld	r0, Z+
    10ee:	f0 81       	ld	r31, Z
    10f0:	e0 2d       	mov	r30, r0
    10f2:	68 2f       	mov	r22, r24
    10f4:	8c ef       	ldi	r24, 0xFC	; 252
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	09 95       	icall
  Serial.write( c );
    10fa:	2c 2f       	mov	r18, r28
    10fc:	33 27       	eor	r19, r19
    10fe:	27 fd       	sbrc	r18, 7
    1100:	30 95       	com	r19

  return c;
}
    1102:	8c 2f       	mov	r24, r28
    1104:	93 2f       	mov	r25, r19
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <_Z12printf_beginv>:

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e7       	ldi	r24, 0x70	; 112
    1110:	98 e0       	ldi	r25, 0x08	; 8
    1112:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <fdevopen>

00001116 <setup>:
typedef enum {
	role_ping_out = 1, role_pong_back
} role_e;

// the setup routine runs once when you press reset:
void setup() {
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
	Serial.begin(9600);
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	55 e2       	ldi	r21, 0x25	; 37
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	8c ef       	ldi	r24, 0xFC	; 252
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN14HardwareSerial5beginEm>
	printf_begin();
    112e:	0e 94 85 08 	call	0x110a	; 0x110a <_Z12printf_beginv>

	pinMode(led,OUTPUT);
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	80 91 00 01 	lds	r24, 0x0100
    1138:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <pinMode>

	printf("Sensor: %i\n\r", roomState.sensor_id);
    113c:	80 91 e7 01 	lds	r24, 0x01E7
    1140:	1f 92       	push	r1
    1142:	8f 93       	push	r24
    1144:	8f e1       	ldi	r24, 0x1F	; 31
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	9f 93       	push	r25
    114a:	8f 93       	push	r24
    114c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <printf>
	printf("*** PRESS 'T' to begin transmitting to the other node\n\r");
    1150:	8c e2       	ldi	r24, 0x2C	; 44
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	9f 93       	push	r25
    1156:	8f 93       	push	r24
    1158:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <printf>

	Serial.println("Initializing radio");
    115c:	64 e6       	ldi	r22, 0x64	; 100
    115e:	71 e0       	ldi	r23, 0x01	; 1
    1160:	8c ef       	ldi	r24, 0xFC	; 252
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_ZN5Print7printlnEPKc>
	radio.begin();
    1168:	8c ee       	ldi	r24, 0xEC	; 236
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 b4 06 	call	0xd68	; 0xd68 <_ZN4RF245beginEv>
	radio.setRetries(15, 15);
    1170:	4f e0       	ldi	r20, 0x0F	; 15
    1172:	6f e0       	ldi	r22, 0x0F	; 15
    1174:	8c ee       	ldi	r24, 0xEC	; 236
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN4RF2410setRetriesEhh>
	radio.openWritingPipe(pipes[0]);
    117c:	01 ee       	ldi	r16, 0xE1	; 225
    117e:	10 ef       	ldi	r17, 0xF0	; 240
    1180:	20 ef       	ldi	r18, 0xF0	; 240
    1182:	30 ef       	ldi	r19, 0xF0	; 240
    1184:	40 ef       	ldi	r20, 0xF0	; 240
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	8c ee       	ldi	r24, 0xEC	; 236
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN4RF2415openWritingPipeEy>
	radio.openReadingPipe(1, pipes[1]);
    1194:	82 ed       	ldi	r24, 0xD2	; 210
    1196:	e8 2e       	mov	r14, r24
    1198:	90 ef       	ldi	r25, 0xF0	; 240
    119a:	f9 2e       	mov	r15, r25
    119c:	00 ef       	ldi	r16, 0xF0	; 240
    119e:	20 ef       	ldi	r18, 0xF0	; 240
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	61 e0       	ldi	r22, 0x01	; 1
    11a8:	8c ee       	ldi	r24, 0xEC	; 236
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN4RF2415openReadingPipeEhy>
	radio.startListening();
    11b0:	8c ee       	ldi	r24, 0xEC	; 236
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_ZN4RF2414startListeningEv>

	//
	// Dump the configuration of the rf unit for debugging
	//

	radio.printDetails();
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	8c ee       	ldi	r24, 0xEC	; 236
    11c6:	91 e0       	ldi	r25, 0x01	; 1
}
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14

	//
	// Dump the configuration of the rf unit for debugging
	//

	radio.printDetails();
    11d0:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <_ZN4RF2412printDetailsEv>

000011d4 <loop>:
}

// the loop routine runs over and over again forever:
void loop() {
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	2b 97       	sbiw	r28, 0x0b	; 11
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61

	digitalWrite(led,HIGH);
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	80 91 00 01 	lds	r24, 0x0100
    11f8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <digitalWrite>
	// First, stop listening so we can talk.
	radio.stopListening();
    11fc:	8c ee       	ldi	r24, 0xEC	; 236
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN4RF2413stopListeningEv>
	char s[10];
	printf("Now sending roomstate %s...", roomState.toString(s));
    1204:	be 01       	movw	r22, r28
    1206:	6f 5f       	subi	r22, 0xFF	; 255
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	84 ee       	ldi	r24, 0xE4	; 228
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN9RoomState8toStringEPc>
    1212:	9f 93       	push	r25
    1214:	8f 93       	push	r24
    1216:	87 e7       	ldi	r24, 0x77	; 119
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	9f 93       	push	r25
    121c:	8f 93       	push	r24
    121e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <printf>
	bool ok = radio.write(&roomState, sizeof(roomState));
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	48 e0       	ldi	r20, 0x08	; 8
    1226:	64 ee       	ldi	r22, 0xE4	; 228
    1228:	71 e0       	ldi	r23, 0x01	; 1
    122a:	8c ee       	ldi	r24, 0xEC	; 236
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN4RF245writeEPKvhb>

	if (ok)
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	88 23       	and	r24, r24
    123c:	19 f0       	breq	.+6      	; 0x1244 <loop+0x70>
		printf("ok...");
    123e:	83 e9       	ldi	r24, 0x93	; 147
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <loop+0x74>
	else
		printf("failed.\n\r");
    1244:	89 e9       	ldi	r24, 0x99	; 153
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	9f 93       	push	r25
    124a:	8f 93       	push	r24
    124c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <printf>
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0

	// Now, continue listening
	radio.startListening();
    1254:	8c ee       	ldi	r24, 0xEC	; 236
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_ZN4RF2414startListeningEv>

	// Wait here until we get a response, or timeout (250ms)
	unsigned long started_waiting_at = millis();
    125c:	0e 94 4f 0c 	call	0x189e	; 0x189e <millis>
    1260:	6b 01       	movw	r12, r22
    1262:	7c 01       	movw	r14, r24
	bool timeout = false;
    1264:	10 e0       	ldi	r17, 0x00	; 0
	while (!radio.available() && !timeout)
    1266:	8c ee       	ldi	r24, 0xEC	; 236
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN4RF249availableEv>
    126e:	81 11       	cpse	r24, r1
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <loop+0xa4>
    1272:	11 11       	cpse	r17, r1
    1274:	03 c0       	rjmp	.+6      	; 0x127c <loop+0xa8>
    1276:	30 c0       	rjmp	.+96     	; 0x12d8 <loop+0x104>
		if (millis() - started_waiting_at > 200)
			timeout = true;

	// Describe the results
	if (timeout) {
    1278:	11 23       	and	r17, r17
    127a:	49 f0       	breq	.+18     	; 0x128e <loop+0xba>
		printf("Failed, response timed out.\n\r");
    127c:	83 ea       	ldi	r24, 0xA3	; 163
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	9f 93       	push	r25
    1282:	8f 93       	push	r24
    1284:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <printf>
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	19 c0       	rjmp	.+50     	; 0x12c0 <loop+0xec>
	} else {
		// Grab the response, compare, and send to debugging spew
		char ack;
		radio.read(&ack, sizeof(char));
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	be 01       	movw	r22, r28
    1292:	65 5f       	subi	r22, 0xF5	; 245
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8c ee       	ldi	r24, 0xEC	; 236
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	0e 94 39 05 	call	0xa72	; 0xa72 <_ZN4RF244readEPvh>

		// Spew it
		printf("Got response %c \n\r", ack);
    129e:	2b 85       	ldd	r18, Y+11	; 0x0b
    12a0:	82 2f       	mov	r24, r18
    12a2:	99 27       	eor	r25, r25
    12a4:	87 fd       	sbrc	r24, 7
    12a6:	90 95       	com	r25
    12a8:	9f 93       	push	r25
    12aa:	2f 93       	push	r18
    12ac:	81 ec       	ldi	r24, 0xC1	; 193
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	9f 93       	push	r25
    12b2:	8f 93       	push	r24
    12b4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <printf>
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
	}
	digitalWrite(led,LOW);
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	80 91 00 01 	lds	r24, 0x0100
    12c6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <digitalWrite>

	// Try again 1s later
	delay(1000);
    12ca:	68 ee       	ldi	r22, 0xE8	; 232
    12cc:	73 e0       	ldi	r23, 0x03	; 3
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <delay>
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <loop+0x120>

	// Wait here until we get a response, or timeout (250ms)
	unsigned long started_waiting_at = millis();
	bool timeout = false;
	while (!radio.available() && !timeout)
		if (millis() - started_waiting_at > 200)
    12d8:	0e 94 4f 0c 	call	0x189e	; 0x189e <millis>
    12dc:	6c 19       	sub	r22, r12
    12de:	7d 09       	sbc	r23, r13
    12e0:	8e 09       	sbc	r24, r14
    12e2:	9f 09       	sbc	r25, r15
    12e4:	11 e0       	ldi	r17, 0x01	; 1
    12e6:	69 3c       	cpi	r22, 0xC9	; 201
    12e8:	71 05       	cpc	r23, r1
    12ea:	81 05       	cpc	r24, r1
    12ec:	91 05       	cpc	r25, r1
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <loop+0x11e>
    12f0:	ba cf       	rjmp	.-140    	; 0x1266 <loop+0x92>
    12f2:	b8 cf       	rjmp	.-144    	; 0x1264 <loop+0x90>
	digitalWrite(led,LOW);

	// Try again 1s later
	delay(1000);

}
    12f4:	2b 96       	adiw	r28, 0x0b	; 11
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	08 95       	ret

00001310 <_GLOBAL__sub_I__Z11serial_putccP6__file>:

// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;

RF24 radio(8, 7);
    1310:	47 e0       	ldi	r20, 0x07	; 7
    1312:	68 e0       	ldi	r22, 0x08	; 8
    1314:	8c ee       	ldi	r24, 0xEC	; 236
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN4RF24C1Ehh>

RoomState roomState;
    131c:	84 ee       	ldi	r24, 0xE4	; 228
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	0c 94 3f 08 	jmp	0x107e	; 0x107e <_ZN9RoomStateC1Ev>

00001324 <_GLOBAL__sub_D__Z11serial_putccP6__file>:
    1324:	84 ee       	ldi	r24, 0xE4	; 228
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	0c 94 32 08 	jmp	0x1064	; 0x1064 <_ZN9RoomStateD1Ev>

0000132c <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    132c:	fc 01       	movw	r30, r24
    132e:	84 85       	ldd	r24, Z+12	; 0x0c
    1330:	95 85       	ldd	r25, Z+13	; 0x0d
    1332:	fc 01       	movw	r30, r24
    1334:	e0 5c       	subi	r30, 0xC0	; 192
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	20 81       	ld	r18, Z
    133a:	31 81       	ldd	r19, Z+1	; 0x01
    133c:	fc 01       	movw	r30, r24
    133e:	ee 5b       	subi	r30, 0xBE	; 190
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	80 81       	ld	r24, Z
    1344:	91 81       	ldd	r25, Z+1	; 0x01
    1346:	28 1b       	sub	r18, r24
    1348:	39 0b       	sbc	r19, r25
    134a:	2f 73       	andi	r18, 0x3F	; 63
    134c:	33 27       	eor	r19, r19
}
    134e:	c9 01       	movw	r24, r18
    1350:	08 95       	ret

00001352 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1352:	fc 01       	movw	r30, r24
    1354:	84 85       	ldd	r24, Z+12	; 0x0c
    1356:	95 85       	ldd	r25, Z+13	; 0x0d
    1358:	fc 01       	movw	r30, r24
    135a:	e0 5c       	subi	r30, 0xC0	; 192
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	40 81       	ld	r20, Z
    1360:	51 81       	ldd	r21, Z+1	; 0x01
    1362:	fc 01       	movw	r30, r24
    1364:	ee 5b       	subi	r30, 0xBE	; 190
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	20 81       	ld	r18, Z
    136a:	31 81       	ldd	r19, Z+1	; 0x01
    136c:	42 17       	cp	r20, r18
    136e:	53 07       	cpc	r21, r19
    1370:	41 f0       	breq	.+16     	; 0x1382 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1372:	01 90       	ld	r0, Z+
    1374:	f0 81       	ld	r31, Z
    1376:	e0 2d       	mov	r30, r0
    1378:	e8 0f       	add	r30, r24
    137a:	f9 1f       	adc	r31, r25
    137c:	20 81       	ld	r18, Z
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    1382:	2f ef       	ldi	r18, 0xFF	; 255
    1384:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    1386:	c9 01       	movw	r24, r18
    1388:	08 95       	ret

0000138a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    138a:	fc 01       	movw	r30, r24
    138c:	84 85       	ldd	r24, Z+12	; 0x0c
    138e:	95 85       	ldd	r25, Z+13	; 0x0d
    1390:	fc 01       	movw	r30, r24
    1392:	e0 5c       	subi	r30, 0xC0	; 192
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	40 81       	ld	r20, Z
    1398:	51 81       	ldd	r21, Z+1	; 0x01
    139a:	fc 01       	movw	r30, r24
    139c:	ee 5b       	subi	r30, 0xBE	; 190
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	20 81       	ld	r18, Z
    13a2:	31 81       	ldd	r19, Z+1	; 0x01
    13a4:	42 17       	cp	r20, r18
    13a6:	53 07       	cpc	r21, r19
    13a8:	81 f0       	breq	.+32     	; 0x13ca <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    13aa:	a0 81       	ld	r26, Z
    13ac:	b1 81       	ldd	r27, Z+1	; 0x01
    13ae:	a8 0f       	add	r26, r24
    13b0:	b9 1f       	adc	r27, r25
    13b2:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    13b4:	20 81       	ld	r18, Z
    13b6:	31 81       	ldd	r19, Z+1	; 0x01
    13b8:	2f 5f       	subi	r18, 0xFF	; 255
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	2f 73       	andi	r18, 0x3F	; 63
    13be:	33 27       	eor	r19, r19
    13c0:	31 83       	std	Z+1, r19	; 0x01
    13c2:	20 83       	st	Z, r18
    return c;
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <_ZN14HardwareSerial4readEv+0x44>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    13ca:	2f ef       	ldi	r18, 0xFF	; 255
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    13ce:	c9 01       	movw	r24, r18
    13d0:	08 95       	ret

000013d2 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
    13d2:	fc 01       	movw	r30, r24
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    13d4:	81 a1       	ldd	r24, Z+33	; 0x21
    13d6:	88 23       	and	r24, r24
    13d8:	29 f0       	breq	.+10     	; 0x13e4 <_ZN14HardwareSerial5flushEv+0x12>
    13da:	a4 89       	ldd	r26, Z+20	; 0x14
    13dc:	b5 89       	ldd	r27, Z+21	; 0x15
    13de:	8c 91       	ld	r24, X
    13e0:	86 ff       	sbrs	r24, 6
    13e2:	fb cf       	rjmp	.-10     	; 0x13da <_ZN14HardwareSerial5flushEv+0x8>
  transmitting = false;
    13e4:	11 a2       	std	Z+33, r1	; 0x21
    13e6:	08 95       	ret

000013e8 <_ZN14HardwareSerial5writeEh>:
}

size_t HardwareSerial::write(uint8_t c)
{
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	fc 01       	movw	r30, r24
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    13ee:	26 85       	ldd	r18, Z+14	; 0x0e
    13f0:	37 85       	ldd	r19, Z+15	; 0x0f
    13f2:	d9 01       	movw	r26, r18
    13f4:	a0 5c       	subi	r26, 0xC0	; 192
    13f6:	bf 4f       	sbci	r27, 0xFF	; 255
    13f8:	8d 91       	ld	r24, X+
    13fa:	9c 91       	ld	r25, X
    13fc:	11 97       	sbiw	r26, 0x01	; 1
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	8f 73       	andi	r24, 0x3F	; 63
    1402:	99 27       	eor	r25, r25
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1404:	e9 01       	movw	r28, r18
    1406:	ce 5b       	subi	r28, 0xBE	; 190
    1408:	df 4f       	sbci	r29, 0xFF	; 255
    140a:	48 81       	ld	r20, Y
    140c:	59 81       	ldd	r21, Y+1	; 0x01
    140e:	84 17       	cp	r24, r20
    1410:	95 07       	cpc	r25, r21
    1412:	d9 f3       	breq	.-10     	; 0x140a <_ZN14HardwareSerial5writeEh+0x22>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1414:	0d 90       	ld	r0, X+
    1416:	bc 91       	ld	r27, X
    1418:	a0 2d       	mov	r26, r0
    141a:	a2 0f       	add	r26, r18
    141c:	b3 1f       	adc	r27, r19
    141e:	6c 93       	st	X, r22
  _tx_buffer->head = i;
    1420:	a6 85       	ldd	r26, Z+14	; 0x0e
    1422:	b7 85       	ldd	r27, Z+15	; 0x0f
    1424:	a0 5c       	subi	r26, 0xC0	; 192
    1426:	bf 4f       	sbci	r27, 0xFF	; 255
    1428:	11 96       	adiw	r26, 0x01	; 1
    142a:	9c 93       	st	X, r25
    142c:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    142e:	a6 89       	ldd	r26, Z+22	; 0x16
    1430:	b7 89       	ldd	r27, Z+23	; 0x17
    1432:	2c 91       	ld	r18, X
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	07 8c       	ldd	r0, Z+31	; 0x1f
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <_ZN14HardwareSerial5writeEh+0x58>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <_ZN14HardwareSerial5writeEh+0x54>
    1444:	28 2b       	or	r18, r24
    1446:	2c 93       	st	X, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	81 a3       	std	Z+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    144c:	04 88       	ldd	r0, Z+20	; 0x14
    144e:	f5 89       	ldd	r31, Z+21	; 0x15
    1450:	e0 2d       	mov	r30, r0
    1452:	80 81       	ld	r24, Z
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	80 83       	st	Z, r24
  
  return 1;
}
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	08 95       	ret

00001462 <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1462:	08 95       	ret

00001464 <__vector_18>:
#elif defined(USART0_RX_vect)
  ISR(USART0_RX_vect)
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
    1464:	1f 92       	push	r1
    1466:	0f 92       	push	r0
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	0f 92       	push	r0
    146c:	11 24       	eor	r1, r1
    146e:	2f 93       	push	r18
    1470:	3f 93       	push	r19
    1472:	4f 93       	push	r20
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    147c:	80 91 c0 00 	lds	r24, 0x00C0
    1480:	82 fd       	sbrc	r24, 2
    1482:	1c c0       	rjmp	.+56     	; 0x14bc <__vector_18+0x58>
      unsigned char c = UDR0;
    1484:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1488:	80 91 a2 02 	lds	r24, 0x02A2
    148c:	90 91 a3 02 	lds	r25, 0x02A3
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	8f 73       	andi	r24, 0x3F	; 63
    1494:	99 27       	eor	r25, r25

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1496:	20 91 a4 02 	lds	r18, 0x02A4
    149a:	30 91 a5 02 	lds	r19, 0x02A5
    149e:	82 17       	cp	r24, r18
    14a0:	93 07       	cpc	r25, r19
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <__vector_18+0x5c>
    buffer->buffer[buffer->head] = c;
    14a4:	e0 91 a2 02 	lds	r30, 0x02A2
    14a8:	f0 91 a3 02 	lds	r31, 0x02A3
    14ac:	ee 59       	subi	r30, 0x9E	; 158
    14ae:	fd 4f       	sbci	r31, 0xFD	; 253
    14b0:	40 83       	st	Z, r20
    buffer->head = i;
    14b2:	90 93 a3 02 	sts	0x02A3, r25
    14b6:	80 93 a2 02 	sts	0x02A2, r24
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <__vector_18+0x5c>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    14bc:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    14c0:	ff 91       	pop	r31
    14c2:	ef 91       	pop	r30
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	4f 91       	pop	r20
    14ca:	3f 91       	pop	r19
    14cc:	2f 91       	pop	r18
    14ce:	0f 90       	pop	r0
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	0f 90       	pop	r0
    14d4:	1f 90       	pop	r1
    14d6:	18 95       	reti

000014d8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    14d8:	8c ef       	ldi	r24, 0xFC	; 252
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 96 09 	call	0x132c	; 0x132c <_ZN14HardwareSerial9availableEv>
    14e0:	89 2b       	or	r24, r25
    14e2:	11 f0       	breq	.+4      	; 0x14e8 <_Z14serialEventRunv+0x10>
    14e4:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <_Z11serialEventv>
    14e8:	08 95       	ret

000014ea <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    1500:	20 91 5e 02 	lds	r18, 0x025E
    1504:	30 91 5f 02 	lds	r19, 0x025F
    1508:	80 91 60 02 	lds	r24, 0x0260
    150c:	90 91 61 02 	lds	r25, 0x0261
    1510:	28 17       	cp	r18, r24
    1512:	39 07       	cpc	r19, r25
    1514:	31 f4       	brne	.+12     	; 0x1522 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1516:	80 91 c1 00 	lds	r24, 0x00C1
    151a:	8f 7d       	andi	r24, 0xDF	; 223
    151c:	80 93 c1 00 	sts	0x00C1, r24
    1520:	14 c0       	rjmp	.+40     	; 0x154a <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1522:	e0 91 60 02 	lds	r30, 0x0260
    1526:	f0 91 61 02 	lds	r31, 0x0261
    152a:	e2 5e       	subi	r30, 0xE2	; 226
    152c:	fd 4f       	sbci	r31, 0xFD	; 253
    152e:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1530:	80 91 60 02 	lds	r24, 0x0260
    1534:	90 91 61 02 	lds	r25, 0x0261
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	8f 73       	andi	r24, 0x3F	; 63
    153c:	99 27       	eor	r25, r25
    153e:	90 93 61 02 	sts	0x0261, r25
    1542:	80 93 60 02 	sts	0x0260, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1546:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	ec 01       	movw	r28, r24
    156e:	6a 01       	movw	r12, r20
    1570:	7b 01       	movw	r14, r22
  }
#endif

try_again:
  
  if (use_u2x) {
    1572:	41 15       	cp	r20, r1
    1574:	81 ee       	ldi	r24, 0xE1	; 225
    1576:	58 07       	cpc	r21, r24
    1578:	61 05       	cpc	r22, r1
    157a:	71 05       	cpc	r23, r1
    157c:	f9 f0       	breq	.+62     	; 0x15bc <_ZN14HardwareSerial5beginEm+0x5c>
    *_ucsra = 1 << _u2x;
    157e:	ec 89       	ldd	r30, Y+20	; 0x14
    1580:	fd 89       	ldd	r31, Y+21	; 0x15
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	08 a0       	ldd	r0, Y+32	; 0x20
    1588:	02 c0       	rjmp	.+4      	; 0x158e <_ZN14HardwareSerial5beginEm+0x2e>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <_ZN14HardwareSerial5beginEm+0x2a>
    1592:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	79 e0       	ldi	r23, 0x09	; 9
    1598:	8d e3       	ldi	r24, 0x3D	; 61
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a7 01       	movw	r20, r14
    159e:	96 01       	movw	r18, r12
    15a0:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__udivmodsi4>
    15a4:	21 50       	subi	r18, 0x01	; 1
    15a6:	31 09       	sbc	r19, r1
    15a8:	41 09       	sbc	r20, r1
    15aa:	51 09       	sbc	r21, r1
    15ac:	56 95       	lsr	r21
    15ae:	47 95       	ror	r20
    15b0:	37 95       	ror	r19
    15b2:	27 95       	ror	r18
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
    15b4:	21 15       	cp	r18, r1
    15b6:	80 e1       	ldi	r24, 0x10	; 16
    15b8:	38 07       	cpc	r19, r24
    15ba:	98 f0       	brcs	.+38     	; 0x15e2 <_ZN14HardwareSerial5beginEm+0x82>
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    15bc:	ec 89       	ldd	r30, Y+20	; 0x14
    15be:	fd 89       	ldd	r31, Y+21	; 0x15
    15c0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    15c2:	60 e8       	ldi	r22, 0x80	; 128
    15c4:	74 e8       	ldi	r23, 0x84	; 132
    15c6:	8e e1       	ldi	r24, 0x1E	; 30
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a7 01       	movw	r20, r14
    15cc:	96 01       	movw	r18, r12
    15ce:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__udivmodsi4>
    15d2:	21 50       	subi	r18, 0x01	; 1
    15d4:	31 09       	sbc	r19, r1
    15d6:	41 09       	sbc	r20, r1
    15d8:	51 09       	sbc	r21, r1
    15da:	56 95       	lsr	r21
    15dc:	47 95       	ror	r20
    15de:	37 95       	ror	r19
    15e0:	27 95       	ror	r18
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    15e2:	e8 89       	ldd	r30, Y+16	; 0x10
    15e4:	f9 89       	ldd	r31, Y+17	; 0x11
    15e6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    15e8:	ea 89       	ldd	r30, Y+18	; 0x12
    15ea:	fb 89       	ldd	r31, Y+19	; 0x13
    15ec:	20 83       	st	Z, r18

  transmitting = false;
    15ee:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    15f0:	ee 89       	ldd	r30, Y+22	; 0x16
    15f2:	ff 89       	ldd	r31, Y+23	; 0x17
    15f4:	40 81       	ld	r20, Z
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9c 01       	movw	r18, r24
    15fc:	0c 8c       	ldd	r0, Y+28	; 0x1c
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <_ZN14HardwareSerial5beginEm+0xa4>
    1600:	22 0f       	add	r18, r18
    1602:	33 1f       	adc	r19, r19
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <_ZN14HardwareSerial5beginEm+0xa0>
    1608:	42 2b       	or	r20, r18
    160a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    160c:	ee 89       	ldd	r30, Y+22	; 0x16
    160e:	ff 89       	ldd	r31, Y+23	; 0x17
    1610:	40 81       	ld	r20, Z
    1612:	9c 01       	movw	r18, r24
    1614:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1616:	02 c0       	rjmp	.+4      	; 0x161c <_ZN14HardwareSerial5beginEm+0xbc>
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <_ZN14HardwareSerial5beginEm+0xb8>
    1620:	42 2b       	or	r20, r18
    1622:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    1624:	ee 89       	ldd	r30, Y+22	; 0x16
    1626:	ff 89       	ldd	r31, Y+23	; 0x17
    1628:	40 81       	ld	r20, Z
    162a:	9c 01       	movw	r18, r24
    162c:	0e 8c       	ldd	r0, Y+30	; 0x1e
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <_ZN14HardwareSerial5beginEm+0xd4>
    1630:	22 0f       	add	r18, r18
    1632:	33 1f       	adc	r19, r19
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <_ZN14HardwareSerial5beginEm+0xd0>
    1638:	42 2b       	or	r20, r18
    163a:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    163c:	ee 89       	ldd	r30, Y+22	; 0x16
    163e:	ff 89       	ldd	r31, Y+23	; 0x17
    1640:	20 81       	ld	r18, Z
    1642:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1644:	02 c0       	rjmp	.+4      	; 0x164a <_ZN14HardwareSerial5beginEm+0xea>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <_ZN14HardwareSerial5beginEm+0xe6>
    164e:	80 95       	com	r24
    1650:	82 23       	and	r24, r18
    1652:	80 83       	st	Z, r24
}
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	08 95       	ret

00001662 <_GLOBAL__sub_I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1662:	10 92 ff 01 	sts	0x01FF, r1
    1666:	10 92 fe 01 	sts	0x01FE, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    166a:	88 ee       	ldi	r24, 0xE8	; 232
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	a0 e0       	ldi	r26, 0x00	; 0
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	80 93 00 02 	sts	0x0200, r24
    1676:	90 93 01 02 	sts	0x0201, r25
    167a:	a0 93 02 02 	sts	0x0202, r26
    167e:	b0 93 03 02 	sts	0x0203, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1682:	88 ed       	ldi	r24, 0xD8	; 216
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	90 93 fd 01 	sts	0x01FD, r25
    168a:	80 93 fc 01 	sts	0x01FC, r24
{
  _rx_buffer = rx_buffer;
    168e:	82 e6       	ldi	r24, 0x62	; 98
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	90 93 09 02 	sts	0x0209, r25
    1696:	80 93 08 02 	sts	0x0208, r24
  _tx_buffer = tx_buffer;
    169a:	8e e1       	ldi	r24, 0x1E	; 30
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	90 93 0b 02 	sts	0x020B, r25
    16a2:	80 93 0a 02 	sts	0x020A, r24
  _ubrrh = ubrrh;
    16a6:	85 ec       	ldi	r24, 0xC5	; 197
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	90 93 0d 02 	sts	0x020D, r25
    16ae:	80 93 0c 02 	sts	0x020C, r24
  _ubrrl = ubrrl;
    16b2:	84 ec       	ldi	r24, 0xC4	; 196
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	90 93 0f 02 	sts	0x020F, r25
    16ba:	80 93 0e 02 	sts	0x020E, r24
  _ucsra = ucsra;
    16be:	80 ec       	ldi	r24, 0xC0	; 192
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	90 93 11 02 	sts	0x0211, r25
    16c6:	80 93 10 02 	sts	0x0210, r24
  _ucsrb = ucsrb;
    16ca:	81 ec       	ldi	r24, 0xC1	; 193
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	90 93 13 02 	sts	0x0213, r25
    16d2:	80 93 12 02 	sts	0x0212, r24
  _ucsrc = ucsrc;
    16d6:	82 ec       	ldi	r24, 0xC2	; 194
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	90 93 15 02 	sts	0x0215, r25
    16de:	80 93 14 02 	sts	0x0214, r24
  _udr = udr;
    16e2:	86 ec       	ldi	r24, 0xC6	; 198
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	90 93 17 02 	sts	0x0217, r25
    16ea:	80 93 16 02 	sts	0x0216, r24
  _rxen = rxen;
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	80 93 18 02 	sts	0x0218, r24
  _txen = txen;
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	80 93 19 02 	sts	0x0219, r24
  _rxcie = rxcie;
    16fa:	87 e0       	ldi	r24, 0x07	; 7
    16fc:	80 93 1a 02 	sts	0x021A, r24
  _udrie = udrie;
    1700:	85 e0       	ldi	r24, 0x05	; 5
    1702:	80 93 1b 02 	sts	0x021B, r24
  _u2x = u2x;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	80 93 1c 02 	sts	0x021C, r24
    170c:	08 95       	ret

0000170e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	6c 01       	movw	r12, r24
    1720:	eb 01       	movw	r28, r22
    1722:	7a 01       	movw	r14, r20
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1724:	e6 0e       	add	r14, r22
    1726:	f7 1e       	adc	r15, r23
{
  size_t n = 0;
    1728:	00 e0       	ldi	r16, 0x00	; 0
    172a:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    172c:	0b c0       	rjmp	.+22     	; 0x1744 <_ZN5Print5writeEPKhj+0x36>
    n += write(*buffer++);
    172e:	69 91       	ld	r22, Y+
    1730:	d6 01       	movw	r26, r12
    1732:	ed 91       	ld	r30, X+
    1734:	fc 91       	ld	r31, X
    1736:	01 90       	ld	r0, Z+
    1738:	f0 81       	ld	r31, Z
    173a:	e0 2d       	mov	r30, r0
    173c:	c6 01       	movw	r24, r12
    173e:	09 95       	icall
    1740:	08 0f       	add	r16, r24
    1742:	19 1f       	adc	r17, r25

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1744:	ce 15       	cp	r28, r14
    1746:	df 05       	cpc	r29, r15
    1748:	91 f7       	brne	.-28     	; 0x172e <_ZN5Print5writeEPKhj+0x20>
    n += write(*buffer++);
  }
  return n;
}
    174a:	c8 01       	movw	r24, r16
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	08 95       	ret

0000175e <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    175e:	61 15       	cp	r22, r1
    1760:	71 05       	cpc	r23, r1
    1762:	81 f0       	breq	.+32     	; 0x1784 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    1764:	db 01       	movw	r26, r22
    1766:	0d 90       	ld	r0, X+
    1768:	00 20       	and	r0, r0
    176a:	e9 f7       	brne	.-6      	; 0x1766 <_ZN5Print5writeEPKc+0x8>
    176c:	ad 01       	movw	r20, r26
    176e:	41 50       	subi	r20, 0x01	; 1
    1770:	51 09       	sbc	r21, r1
    1772:	46 1b       	sub	r20, r22
    1774:	57 0b       	sbc	r21, r23
    1776:	dc 01       	movw	r26, r24
    1778:	ed 91       	ld	r30, X+
    177a:	fc 91       	ld	r31, X
    177c:	02 80       	ldd	r0, Z+2	; 0x02
    177e:	f3 81       	ldd	r31, Z+3	; 0x03
    1780:	e0 2d       	mov	r30, r0
    1782:	09 94       	ijmp
    }
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	08 95       	ret

0000178a <_ZN5Print5printEc>:
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    178a:	dc 01       	movw	r26, r24
    178c:	ed 91       	ld	r30, X+
    178e:	fc 91       	ld	r31, X
    1790:	01 90       	ld	r0, Z+
    1792:	f0 81       	ld	r31, Z
    1794:	e0 2d       	mov	r30, r0
    1796:	09 94       	ijmp

00001798 <_ZN5Print7printlnEv>:
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	ec 01       	movw	r28, r24
    17a2:	6d e0       	ldi	r22, 0x0D	; 13
    17a4:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN5Print5printEc>
    17a8:	8c 01       	movw	r16, r24
    17aa:	6a e0       	ldi	r22, 0x0A	; 10
    17ac:	ce 01       	movw	r24, r28
    17ae:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN5Print5printEc>
    17b2:	9c 01       	movw	r18, r24
    17b4:	20 0f       	add	r18, r16
    17b6:	31 1f       	adc	r19, r17
    17b8:	c9 01       	movw	r24, r18
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	08 95       	ret

000017c4 <_ZN5Print7printlnEPKc>:
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	ec 01       	movw	r28, r24
    size_t print(int, int = DEC);
    size_t print(unsigned int, int = DEC);
    size_t print(long, int = DEC);
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);
    17ce:	0e 94 af 0b 	call	0x175e	; 0x175e <_ZN5Print5writeEPKc>
    17d2:	8c 01       	movw	r16, r24
    17d4:	ce 01       	movw	r24, r28
    17d6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN5Print7printlnEv>
    17da:	98 01       	movw	r18, r16
    17dc:	28 0f       	add	r18, r24
    17de:	39 1f       	adc	r19, r25
    17e0:	c9 01       	movw	r24, r18
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <main>:
#include <Arduino.h>

int main(void)
{
	init();
    17ec:	0e 94 bb 0c 	call	0x1976	; 0x1976 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    17f0:	0e 94 8b 08 	call	0x1116	; 0x1116 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    17f4:	cc e6       	ldi	r28, 0x6C	; 108
    17f6:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    17f8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <loop>
		if (serialEventRun) serialEventRun();
    17fc:	20 97       	sbiw	r28, 0x00	; 0
    17fe:	e1 f3       	breq	.-8      	; 0x17f8 <main+0xc>
    1800:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <_Z14serialEventRunv>
    1804:	f9 cf       	rjmp	.-14     	; 0x17f8 <main+0xc>

00001806 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    1806:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <free>

0000180a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1820:	80 91 a6 02 	lds	r24, 0x02A6
    1824:	90 91 a7 02 	lds	r25, 0x02A7
    1828:	a0 91 a8 02 	lds	r26, 0x02A8
    182c:	b0 91 a9 02 	lds	r27, 0x02A9
	unsigned char f = timer0_fract;
    1830:	30 91 ae 02 	lds	r19, 0x02AE

	m += MILLIS_INC;
	f += FRACT_INC;
    1834:	23 2f       	mov	r18, r19
    1836:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1838:	2d 37       	cpi	r18, 0x7D	; 125
    183a:	20 f4       	brcc	.+8      	; 0x1844 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	a1 1d       	adc	r26, r1
    1840:	b1 1d       	adc	r27, r1
    1842:	05 c0       	rjmp	.+10     	; 0x184e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1844:	23 2f       	mov	r18, r19
    1846:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
    1848:	02 96       	adiw	r24, 0x02	; 2
    184a:	a1 1d       	adc	r26, r1
    184c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    184e:	20 93 ae 02 	sts	0x02AE, r18
	timer0_millis = m;
    1852:	80 93 a6 02 	sts	0x02A6, r24
    1856:	90 93 a7 02 	sts	0x02A7, r25
    185a:	a0 93 a8 02 	sts	0x02A8, r26
    185e:	b0 93 a9 02 	sts	0x02A9, r27
	timer0_overflow_count++;
    1862:	80 91 aa 02 	lds	r24, 0x02AA
    1866:	90 91 ab 02 	lds	r25, 0x02AB
    186a:	a0 91 ac 02 	lds	r26, 0x02AC
    186e:	b0 91 ad 02 	lds	r27, 0x02AD
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	a1 1d       	adc	r26, r1
    1876:	b1 1d       	adc	r27, r1
    1878:	80 93 aa 02 	sts	0x02AA, r24
    187c:	90 93 ab 02 	sts	0x02AB, r25
    1880:	a0 93 ac 02 	sts	0x02AC, r26
    1884:	b0 93 ad 02 	sts	0x02AD, r27
}
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	3f 91       	pop	r19
    1892:	2f 91       	pop	r18
    1894:	0f 90       	pop	r0
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	0f 90       	pop	r0
    189a:	1f 90       	pop	r1
    189c:	18 95       	reti

0000189e <millis>:

unsigned long millis()
{
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
    18a2:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    18a4:	f8 94       	cli
	m = timer0_millis;
    18a6:	00 91 a6 02 	lds	r16, 0x02A6
    18aa:	10 91 a7 02 	lds	r17, 0x02A7
    18ae:	20 91 a8 02 	lds	r18, 0x02A8
    18b2:	30 91 a9 02 	lds	r19, 0x02A9
	SREG = oldSREG;
    18b6:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    18b8:	b8 01       	movw	r22, r16
    18ba:	c9 01       	movw	r24, r18
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	08 95       	ret

000018c2 <micros>:

unsigned long micros() {
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    18c6:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    18c8:	f8 94       	cli
	m = timer0_overflow_count;
    18ca:	00 91 aa 02 	lds	r16, 0x02AA
    18ce:	10 91 ab 02 	lds	r17, 0x02AB
    18d2:	20 91 ac 02 	lds	r18, 0x02AC
    18d6:	30 91 ad 02 	lds	r19, 0x02AD
#if defined(TCNT0)
	t = TCNT0;
    18da:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    18dc:	a8 9b       	sbis	0x15, 0	; 21
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <micros+0x2a>
    18e0:	8f 3f       	cpi	r24, 0xFF	; 255
    18e2:	21 f0       	breq	.+8      	; 0x18ec <micros+0x2a>
		m++;
    18e4:	0f 5f       	subi	r16, 0xFF	; 255
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	2f 4f       	sbci	r18, 0xFF	; 255
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    18ec:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    18ee:	32 2f       	mov	r19, r18
    18f0:	21 2f       	mov	r18, r17
    18f2:	10 2f       	mov	r17, r16
    18f4:	00 27       	eor	r16, r16
    18f6:	08 0f       	add	r16, r24
    18f8:	11 1d       	adc	r17, r1
    18fa:	21 1d       	adc	r18, r1
    18fc:	31 1d       	adc	r19, r1
    18fe:	42 e0       	ldi	r20, 0x02	; 2
    1900:	00 0f       	add	r16, r16
    1902:	11 1f       	adc	r17, r17
    1904:	22 1f       	adc	r18, r18
    1906:	33 1f       	adc	r19, r19
    1908:	4a 95       	dec	r20
    190a:	d1 f7       	brne	.-12     	; 0x1900 <micros+0x3e>
}
    190c:	b8 01       	movw	r22, r16
    190e:	c9 01       	movw	r24, r18
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <delay>:

void delay(unsigned long ms)
{
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	6b 01       	movw	r12, r22
    1924:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    1926:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <micros>
    192a:	eb 01       	movw	r28, r22

	while (ms > 0) {
    192c:	0e c0       	rjmp	.+28     	; 0x194a <delay+0x34>
		if (((uint16_t)micros() - start) >= 1000) {
    192e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <micros>
    1932:	6c 1b       	sub	r22, r28
    1934:	7d 0b       	sbc	r23, r29
    1936:	68 3e       	cpi	r22, 0xE8	; 232
    1938:	73 40       	sbci	r23, 0x03	; 3
    193a:	38 f0       	brcs	.+14     	; 0x194a <delay+0x34>
			ms--;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	c8 1a       	sub	r12, r24
    1940:	d1 08       	sbc	r13, r1
    1942:	e1 08       	sbc	r14, r1
    1944:	f1 08       	sbc	r15, r1
			start += 1000;
    1946:	c8 51       	subi	r28, 0x18	; 24
    1948:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    194a:	c1 14       	cp	r12, r1
    194c:	d1 04       	cpc	r13, r1
    194e:	e1 04       	cpc	r14, r1
    1950:	f1 04       	cpc	r15, r1
    1952:	69 f7       	brne	.-38     	; 0x192e <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	08 95       	ret

00001962 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	39 f0       	breq	.+14     	; 0x1974 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    196e:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <delayMicroseconds+0xe>
    1974:	08 95       	ret

00001976 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1976:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1978:	84 b5       	in	r24, 0x24	; 36
    197a:	82 60       	ori	r24, 0x02	; 2
    197c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    197e:	84 b5       	in	r24, 0x24	; 36
    1980:	81 60       	ori	r24, 0x01	; 1
    1982:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1984:	85 b5       	in	r24, 0x25	; 37
    1986:	82 60       	ori	r24, 0x02	; 2
    1988:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    198a:	85 b5       	in	r24, 0x25	; 37
    198c:	81 60       	ori	r24, 0x01	; 1
    198e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1990:	ee e6       	ldi	r30, 0x6E	; 110
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	81 60       	ori	r24, 0x01	; 1
    1998:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    199a:	e1 e8       	ldi	r30, 0x81	; 129
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    19a0:	80 81       	ld	r24, Z
    19a2:	82 60       	ori	r24, 0x02	; 2
    19a4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    19a6:	80 81       	ld	r24, Z
    19a8:	81 60       	ori	r24, 0x01	; 1
    19aa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    19ac:	e0 e8       	ldi	r30, 0x80	; 128
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	81 60       	ori	r24, 0x01	; 1
    19b4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    19b6:	e1 eb       	ldi	r30, 0xB1	; 177
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	84 60       	ori	r24, 0x04	; 4
    19be:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    19c0:	e0 eb       	ldi	r30, 0xB0	; 176
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	81 60       	ori	r24, 0x01	; 1
    19c8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    19ca:	ea e7       	ldi	r30, 0x7A	; 122
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	84 60       	ori	r24, 0x04	; 4
    19d2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    19d4:	80 81       	ld	r24, Z
    19d6:	82 60       	ori	r24, 0x02	; 2
    19d8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    19da:	80 81       	ld	r24, Z
    19dc:	81 60       	ori	r24, 0x01	; 1
    19de:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    19e0:	80 81       	ld	r24, Z
    19e2:	80 68       	ori	r24, 0x80	; 128
    19e4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    19e6:	10 92 c1 00 	sts	0x00C1, r1
    19ea:	08 95       	ret

000019ec <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    19ec:	83 30       	cpi	r24, 0x03	; 3
    19ee:	69 f0       	breq	.+26     	; 0x1a0a <turnOffPWM+0x1e>
    19f0:	28 f4       	brcc	.+10     	; 0x19fc <turnOffPWM+0x10>
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	a1 f0       	breq	.+40     	; 0x1a1e <turnOffPWM+0x32>
    19f6:	82 30       	cpi	r24, 0x02	; 2
    19f8:	11 f5       	brne	.+68     	; 0x1a3e <turnOffPWM+0x52>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <turnOffPWM+0x38>
    19fc:	86 30       	cpi	r24, 0x06	; 6
    19fe:	b1 f0       	breq	.+44     	; 0x1a2c <turnOffPWM+0x40>
    1a00:	87 30       	cpi	r24, 0x07	; 7
    1a02:	c1 f0       	breq	.+48     	; 0x1a34 <turnOffPWM+0x48>
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	d9 f4       	brne	.+54     	; 0x1a3e <turnOffPWM+0x52>
    1a08:	04 c0       	rjmp	.+8      	; 0x1a12 <turnOffPWM+0x26>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1a0a:	80 91 80 00 	lds	r24, 0x0080
    1a0e:	8f 77       	andi	r24, 0x7F	; 127
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <turnOffPWM+0x2c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1a12:	80 91 80 00 	lds	r24, 0x0080
    1a16:	8f 7d       	andi	r24, 0xDF	; 223
    1a18:	80 93 80 00 	sts	0x0080, r24
    1a1c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1a1e:	84 b5       	in	r24, 0x24	; 36
    1a20:	8f 77       	andi	r24, 0x7F	; 127
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <turnOffPWM+0x3c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1a24:	84 b5       	in	r24, 0x24	; 36
    1a26:	8f 7d       	andi	r24, 0xDF	; 223
    1a28:	84 bd       	out	0x24, r24	; 36
    1a2a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1a2c:	80 91 b0 00 	lds	r24, 0x00B0
    1a30:	8f 77       	andi	r24, 0x7F	; 127
    1a32:	03 c0       	rjmp	.+6      	; 0x1a3a <turnOffPWM+0x4e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1a34:	80 91 b0 00 	lds	r24, 0x00B0
    1a38:	8f 7d       	andi	r24, 0xDF	; 223
    1a3a:	80 93 b0 00 	sts	0x00B0, r24
    1a3e:	08 95       	ret

00001a40 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	fc 01       	movw	r30, r24
    1a48:	e1 5c       	subi	r30, 0xC1	; 193
    1a4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a4c:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    1a4e:	fc 01       	movw	r30, r24
    1a50:	ed 5a       	subi	r30, 0xAD	; 173
    1a52:	fd 4f       	sbci	r31, 0xFD	; 253
    1a54:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1a56:	88 23       	and	r24, r24
    1a58:	41 f1       	breq	.+80     	; 0x1aaa <pinMode+0x6a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	fc 01       	movw	r30, r24
    1a62:	ef 58       	subi	r30, 0x8F	; 143
    1a64:	fd 4f       	sbci	r31, 0xFD	; 253
    1a66:	25 91       	lpm	r18, Z+
    1a68:	34 91       	lpm	r19, Z+
    1a6a:	d9 01       	movw	r26, r18
	out = portOutputRegister(port);
    1a6c:	89 59       	subi	r24, 0x99	; 153
    1a6e:	9d 4f       	sbci	r25, 0xFD	; 253
    1a70:	fc 01       	movw	r30, r24
    1a72:	85 91       	lpm	r24, Z+
    1a74:	94 91       	lpm	r25, Z+
    1a76:	c8 2f       	mov	r28, r24
    1a78:	d9 2f       	mov	r29, r25

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    1a7a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a7c:	f8 94       	cli
		*reg &= ~bit;
    1a7e:	8c 91       	ld	r24, X

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    1a80:	61 11       	cpse	r22, r1
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <pinMode+0x50>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    1a84:	40 95       	com	r20
    1a86:	84 23       	and	r24, r20
    1a88:	8c 93       	st	X, r24
		*out &= ~bit;
    1a8a:	88 81       	ld	r24, Y
    1a8c:	84 23       	and	r24, r20
    1a8e:	08 c0       	rjmp	.+16     	; 0x1aa0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1a90:	62 30       	cpi	r22, 0x02	; 2
    1a92:	41 f4       	brne	.+16     	; 0x1aa4 <pinMode+0x64>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    1a94:	24 2f       	mov	r18, r20
    1a96:	20 95       	com	r18
    1a98:	82 23       	and	r24, r18
    1a9a:	8c 93       	st	X, r24
		*out |= bit;
    1a9c:	88 81       	ld	r24, Y
    1a9e:	84 2b       	or	r24, r20
    1aa0:	88 83       	st	Y, r24
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <pinMode+0x68>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
    1aa4:	84 2b       	or	r24, r20
    1aa6:	8c 93       	st	X, r24
		SREG = oldSREG;
    1aa8:	9f bf       	out	0x3f, r25	; 63
	}
}
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1ab0:	0f 93       	push	r16
    1ab2:	1f 93       	push	r17
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	1f 92       	push	r1
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	f9 01       	movw	r30, r18
    1ac4:	e5 5d       	subi	r30, 0xD5	; 213
    1ac6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac8:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1aca:	f9 01       	movw	r30, r18
    1acc:	e1 5c       	subi	r30, 0xC1	; 193
    1ace:	fd 4f       	sbci	r31, 0xFD	; 253
    1ad0:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    1ad2:	f9 01       	movw	r30, r18
    1ad4:	ed 5a       	subi	r30, 0xAD	; 173
    1ad6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ad8:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1ada:	00 23       	and	r16, r16
    1adc:	d1 f0       	breq	.+52     	; 0x1b12 <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ade:	88 23       	and	r24, r24
    1ae0:	21 f0       	breq	.+8      	; 0x1aea <digitalWrite+0x3a>
    1ae2:	69 83       	std	Y+1, r22	; 0x01
    1ae4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <turnOffPWM>
    1ae8:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    1aea:	e0 2f       	mov	r30, r16
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	ee 0f       	add	r30, r30
    1af0:	ff 1f       	adc	r31, r31
    1af2:	e9 59       	subi	r30, 0x99	; 153
    1af4:	fd 4f       	sbci	r31, 0xFD	; 253
    1af6:	85 91       	lpm	r24, Z+
    1af8:	94 91       	lpm	r25, Z+
    1afa:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    1afc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1afe:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    1b00:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    1b02:	61 11       	cpse	r22, r1
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <digitalWrite+0x5c>
		*out &= ~bit;
    1b06:	10 95       	com	r17
    1b08:	81 23       	and	r24, r17
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <digitalWrite+0x5e>
	} else {
		*out |= bit;
    1b0c:	81 2b       	or	r24, r17
    1b0e:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1b10:	9f bf       	out	0x3f, r25	; 63
}
    1b12:	0f 90       	pop	r0
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	08 95       	ret

00001b1e <malloc>:
struct __freelist *__flp;

ATTRIBUTE_CLIB_SECTION
void *
malloc(size_t len)
{
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	91 05       	cpc	r25, r1
    1b2a:	10 f4       	brcc	.+4      	; 0x1b30 <malloc+0x12>
		len = sizeof(struct __freelist) - sizeof(size_t);
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    1b30:	e0 91 b1 02 	lds	r30, 0x02B1
    1b34:	f0 91 b2 02 	lds	r31, 0x02B2
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	c0 e0       	ldi	r28, 0x00	; 0
    1b3e:	d0 e0       	ldi	r29, 0x00	; 0
    1b40:	23 c0       	rjmp	.+70     	; 0x1b88 <malloc+0x6a>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    1b42:	40 81       	ld	r20, Z
    1b44:	51 81       	ldd	r21, Z+1	; 0x01
    1b46:	48 17       	cp	r20, r24
    1b48:	59 07       	cpc	r21, r25
    1b4a:	a8 f0       	brcs	.+42     	; 0x1b76 <malloc+0x58>
			continue;
		if (fp1->sz == len) {
    1b4c:	48 17       	cp	r20, r24
    1b4e:	59 07       	cpc	r21, r25
    1b50:	61 f4       	brne	.+24     	; 0x1b6a <malloc+0x4c>
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    1b56:	20 97       	sbiw	r28, 0x00	; 0
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <malloc+0x42>
				fp2->nx = fp1->nx;
    1b5a:	9b 83       	std	Y+3, r25	; 0x03
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
    1b5e:	2e c0       	rjmp	.+92     	; 0x1bbc <malloc+0x9e>
			else
				__flp = fp1->nx;
    1b60:	90 93 b2 02 	sts	0x02B2, r25
    1b64:	80 93 b1 02 	sts	0x02B1, r24
    1b68:	29 c0       	rjmp	.+82     	; 0x1bbc <malloc+0x9e>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    1b6a:	21 15       	cp	r18, r1
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	29 f0       	breq	.+10     	; 0x1b7a <malloc+0x5c>
    1b70:	42 17       	cp	r20, r18
    1b72:	53 07       	cpc	r21, r19
    1b74:	10 f0       	brcs	.+4      	; 0x1b7a <malloc+0x5c>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    1b76:	a9 01       	movw	r20, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <malloc+0x60>
			else
				__flp = fp1->nx;
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    1b7a:	be 01       	movw	r22, r28
    1b7c:	df 01       	movw	r26, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    1b7e:	02 81       	ldd	r16, Z+2	; 0x02
    1b80:	13 81       	ldd	r17, Z+3	; 0x03
    1b82:	ef 01       	movw	r28, r30
    1b84:	9a 01       	movw	r18, r20
    1b86:	f8 01       	movw	r30, r16
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    1b88:	30 97       	sbiw	r30, 0x00	; 0
    1b8a:	d9 f6       	brne	.-74     	; 0x1b42 <malloc+0x24>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    1b8c:	21 15       	cp	r18, r1
    1b8e:	31 05       	cpc	r19, r1
    1b90:	09 f1       	breq	.+66     	; 0x1bd4 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    1b92:	28 1b       	sub	r18, r24
    1b94:	39 0b       	sbc	r19, r25
    1b96:	24 30       	cpi	r18, 0x04	; 4
    1b98:	31 05       	cpc	r19, r1
    1b9a:	90 f4       	brcc	.+36     	; 0x1bc0 <malloc+0xa2>
    1b9c:	12 96       	adiw	r26, 0x02	; 2
    1b9e:	8d 91       	ld	r24, X+
    1ba0:	9c 91       	ld	r25, X
    1ba2:	13 97       	sbiw	r26, 0x03	; 3
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    1ba4:	61 15       	cp	r22, r1
    1ba6:	71 05       	cpc	r23, r1
    1ba8:	21 f0       	breq	.+8      	; 0x1bb2 <malloc+0x94>
				sfp2->nx = sfp1->nx;
    1baa:	fb 01       	movw	r30, r22
    1bac:	93 83       	std	Z+3, r25	; 0x03
    1bae:	82 83       	std	Z+2, r24	; 0x02
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <malloc+0x9c>
			else
				__flp = sfp1->nx;
    1bb2:	90 93 b2 02 	sts	0x02B2, r25
    1bb6:	80 93 b1 02 	sts	0x02B1, r24
			return &(sfp1->nx);
    1bba:	fd 01       	movw	r30, r26
    1bbc:	32 96       	adiw	r30, 0x02	; 2
    1bbe:	44 c0       	rjmp	.+136    	; 0x1c48 <malloc+0x12a>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    1bc0:	fd 01       	movw	r30, r26
    1bc2:	e2 0f       	add	r30, r18
    1bc4:	f3 1f       	adc	r31, r19
    1bc6:	81 93       	st	Z+, r24
    1bc8:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    1bca:	22 50       	subi	r18, 0x02	; 2
    1bcc:	31 09       	sbc	r19, r1
    1bce:	2d 93       	st	X+, r18
    1bd0:	3c 93       	st	X, r19
		return &(sfp2->nx);
    1bd2:	3a c0       	rjmp	.+116    	; 0x1c48 <malloc+0x12a>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    1bd4:	20 91 af 02 	lds	r18, 0x02AF
    1bd8:	30 91 b0 02 	lds	r19, 0x02B0
    1bdc:	23 2b       	or	r18, r19
    1bde:	41 f4       	brne	.+16     	; 0x1bf0 <malloc+0xd2>
		__brkval = __malloc_heap_start;
    1be0:	20 91 04 01 	lds	r18, 0x0104
    1be4:	30 91 05 01 	lds	r19, 0x0105
    1be8:	30 93 b0 02 	sts	0x02B0, r19
    1bec:	20 93 af 02 	sts	0x02AF, r18
	cp = __malloc_heap_end;
    1bf0:	20 91 02 01 	lds	r18, 0x0102
    1bf4:	30 91 03 01 	lds	r19, 0x0103
	if (cp == 0)
    1bf8:	21 15       	cp	r18, r1
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	41 f4       	brne	.+16     	; 0x1c0e <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    1bfe:	2d b7       	in	r18, 0x3d	; 61
    1c00:	3e b7       	in	r19, 0x3e	; 62
    1c02:	40 91 06 01 	lds	r20, 0x0106
    1c06:	50 91 07 01 	lds	r21, 0x0107
    1c0a:	24 1b       	sub	r18, r20
    1c0c:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    1c0e:	e0 91 af 02 	lds	r30, 0x02AF
    1c12:	f0 91 b0 02 	lds	r31, 0x02B0
    1c16:	e2 17       	cp	r30, r18
    1c18:	f3 07       	cpc	r31, r19
    1c1a:	a0 f4       	brcc	.+40     	; 0x1c44 <malloc+0x126>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    1c1c:	2e 1b       	sub	r18, r30
    1c1e:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    1c20:	28 17       	cp	r18, r24
    1c22:	39 07       	cpc	r19, r25
    1c24:	78 f0       	brcs	.+30     	; 0x1c44 <malloc+0x126>
    1c26:	ac 01       	movw	r20, r24
    1c28:	4e 5f       	subi	r20, 0xFE	; 254
    1c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2c:	24 17       	cp	r18, r20
    1c2e:	35 07       	cpc	r19, r21
    1c30:	48 f0       	brcs	.+18     	; 0x1c44 <malloc+0x126>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    1c32:	4e 0f       	add	r20, r30
    1c34:	5f 1f       	adc	r21, r31
    1c36:	50 93 b0 02 	sts	0x02B0, r21
    1c3a:	40 93 af 02 	sts	0x02AF, r20
		fp1->sz = len;
    1c3e:	81 93       	st	Z+, r24
    1c40:	91 93       	st	Z+, r25
		return &(fp1->nx);
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <malloc+0x12a>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    1c44:	e0 e0       	ldi	r30, 0x00	; 0
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    1c48:	cf 01       	movw	r24, r30
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	08 95       	ret

00001c54 <free>:


ATTRIBUTE_CLIB_SECTION
void
free(void *p)
{
    1c54:	ef 92       	push	r14
    1c56:	ff 92       	push	r15
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <free+0x12>
    1c64:	8f c0       	rjmp	.+286    	; 0x1d84 <free+0x130>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    1c66:	dc 01       	movw	r26, r24
    1c68:	12 97       	sbiw	r26, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    1c6a:	13 96       	adiw	r26, 0x03	; 3
    1c6c:	1c 92       	st	X, r1
    1c6e:	1e 92       	st	-X, r1
    1c70:	12 97       	sbiw	r26, 0x02	; 2
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    1c72:	e0 90 b1 02 	lds	r14, 0x02B1
    1c76:	f0 90 b2 02 	lds	r15, 0x02B2
    1c7a:	e1 14       	cp	r14, r1
    1c7c:	f1 04       	cpc	r15, r1
    1c7e:	89 f4       	brne	.+34     	; 0x1ca2 <free+0x4e>
		if ((char *)p + fpnew->sz == __brkval)
    1c80:	2d 91       	ld	r18, X+
    1c82:	3c 91       	ld	r19, X
    1c84:	11 97       	sbiw	r26, 0x01	; 1
    1c86:	28 0f       	add	r18, r24
    1c88:	39 1f       	adc	r19, r25
    1c8a:	80 91 af 02 	lds	r24, 0x02AF
    1c8e:	90 91 b0 02 	lds	r25, 0x02B0
    1c92:	82 17       	cp	r24, r18
    1c94:	93 07       	cpc	r25, r19
    1c96:	89 f5       	brne	.+98     	; 0x1cfa <free+0xa6>
			__brkval = cpnew;
    1c98:	b0 93 b0 02 	sts	0x02B0, r27
    1c9c:	a0 93 af 02 	sts	0x02AF, r26
    1ca0:	71 c0       	rjmp	.+226    	; 0x1d84 <free+0x130>
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    1ca2:	e7 01       	movw	r28, r14
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <free+0x58>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    1caa:	ea 01       	movw	r28, r20
		if (fp1 < fpnew)
    1cac:	ca 17       	cp	r28, r26
    1cae:	db 07       	cpc	r29, r27
    1cb0:	38 f4       	brcc	.+14     	; 0x1cc0 <free+0x6c>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    1cb2:	4a 81       	ldd	r20, Y+2	; 0x02
    1cb4:	5b 81       	ldd	r21, Y+3	; 0x03
    1cb6:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    1cb8:	41 15       	cp	r20, r1
    1cba:	51 05       	cpc	r21, r1
    1cbc:	b1 f7       	brne	.-20     	; 0x1caa <free+0x56>
    1cbe:	22 c0       	rjmp	.+68     	; 0x1d04 <free+0xb0>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	62 50       	subi	r22, 0x02	; 2
    1cc4:	71 09       	sbc	r23, r1
    1cc6:	fb 01       	movw	r30, r22
    1cc8:	d3 83       	std	Z+3, r29	; 0x03
    1cca:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    1ccc:	00 81       	ld	r16, Z
    1cce:	11 81       	ldd	r17, Z+1	; 0x01
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	40 0f       	add	r20, r16
    1cd4:	51 1f       	adc	r21, r17
    1cd6:	4c 17       	cp	r20, r28
    1cd8:	5d 07       	cpc	r21, r29
    1cda:	61 f4       	brne	.+24     	; 0x1cf4 <free+0xa0>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    1cdc:	48 81       	ld	r20, Y
    1cde:	59 81       	ldd	r21, Y+1	; 0x01
    1ce0:	40 0f       	add	r20, r16
    1ce2:	51 1f       	adc	r21, r17
    1ce4:	4e 5f       	subi	r20, 0xFE	; 254
    1ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce8:	51 83       	std	Z+1, r21	; 0x01
    1cea:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    1cec:	4a 81       	ldd	r20, Y+2	; 0x02
    1cee:	5b 81       	ldd	r21, Y+3	; 0x03
    1cf0:	53 83       	std	Z+3, r21	; 0x03
    1cf2:	42 83       	std	Z+2, r20	; 0x02
		}
		if (fp2 == 0) {
    1cf4:	21 15       	cp	r18, r1
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	29 f4       	brne	.+10     	; 0x1d04 <free+0xb0>
			/* new head of freelist */
			__flp = fpnew;
    1cfa:	b0 93 b2 02 	sts	0x02B2, r27
    1cfe:	a0 93 b1 02 	sts	0x02B1, r26
			return;
    1d02:	40 c0       	rjmp	.+128    	; 0x1d84 <free+0x130>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    1d04:	f9 01       	movw	r30, r18
    1d06:	b3 83       	std	Z+3, r27	; 0x03
    1d08:	a2 83       	std	Z+2, r26	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    1d0a:	e9 01       	movw	r28, r18
    1d0c:	69 91       	ld	r22, Y+
    1d0e:	79 91       	ld	r23, Y+
    1d10:	c6 0f       	add	r28, r22
    1d12:	d7 1f       	adc	r29, r23
    1d14:	ac 17       	cp	r26, r28
    1d16:	bd 07       	cpc	r27, r29
    1d18:	79 f4       	brne	.+30     	; 0x1d38 <free+0xe4>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	5e 91       	ld	r21, -X
    1d1e:	4e 91       	ld	r20, -X
    1d20:	46 0f       	add	r20, r22
    1d22:	57 1f       	adc	r21, r23
    1d24:	4e 5f       	subi	r20, 0xFE	; 254
    1d26:	5f 4f       	sbci	r21, 0xFF	; 255
    1d28:	51 83       	std	Z+1, r21	; 0x01
    1d2a:	40 83       	st	Z, r20
		fp2->nx = fpnew->nx;
    1d2c:	12 96       	adiw	r26, 0x02	; 2
    1d2e:	8d 91       	ld	r24, X+
    1d30:	9c 91       	ld	r25, X
    1d32:	13 97       	sbiw	r26, 0x03	; 3
    1d34:	93 83       	std	Z+3, r25	; 0x03
    1d36:	82 83       	std	Z+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    1d38:	a0 e0       	ldi	r26, 0x00	; 0
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <free+0xee>
    1d3e:	d7 01       	movw	r26, r14
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
    1d40:	7c 01       	movw	r14, r24
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    1d42:	f7 01       	movw	r30, r14
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	c9 f7       	brne	.-14     	; 0x1d3e <free+0xea>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    1d4c:	c7 01       	movw	r24, r14
    1d4e:	02 96       	adiw	r24, 0x02	; 2
	if (cp2 + fp1->sz == __brkval) {
    1d50:	20 81       	ld	r18, Z
    1d52:	31 81       	ldd	r19, Z+1	; 0x01
    1d54:	82 0f       	add	r24, r18
    1d56:	93 1f       	adc	r25, r19
    1d58:	20 91 af 02 	lds	r18, 0x02AF
    1d5c:	30 91 b0 02 	lds	r19, 0x02B0
    1d60:	28 17       	cp	r18, r24
    1d62:	39 07       	cpc	r19, r25
    1d64:	79 f4       	brne	.+30     	; 0x1d84 <free+0x130>
		if (fp2 == NULL)
    1d66:	10 97       	sbiw	r26, 0x00	; 0
    1d68:	29 f4       	brne	.+10     	; 0x1d74 <free+0x120>
			/* Freelist is empty now. */
			__flp = NULL;
    1d6a:	10 92 b2 02 	sts	0x02B2, r1
    1d6e:	10 92 b1 02 	sts	0x02B1, r1
    1d72:	04 c0       	rjmp	.+8      	; 0x1d7c <free+0x128>
		else
			fp2->nx = NULL;
    1d74:	13 96       	adiw	r26, 0x03	; 3
    1d76:	1c 92       	st	X, r1
    1d78:	1e 92       	st	-X, r1
    1d7a:	12 97       	sbiw	r26, 0x02	; 2
		__brkval = cp2 - sizeof(size_t);
    1d7c:	f0 92 b0 02 	sts	0x02B0, r15
    1d80:	e0 92 af 02 	sts	0x02AF, r14
	}
}
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	08 95       	ret

00001d92 <__udivmodsi4>:
    1d92:	a1 e2       	ldi	r26, 0x21	; 33
    1d94:	1a 2e       	mov	r1, r26
    1d96:	aa 1b       	sub	r26, r26
    1d98:	bb 1b       	sub	r27, r27
    1d9a:	fd 01       	movw	r30, r26
    1d9c:	0d c0       	rjmp	.+26     	; 0x1db8 <__udivmodsi4_ep>

00001d9e <__udivmodsi4_loop>:
    1d9e:	aa 1f       	adc	r26, r26
    1da0:	bb 1f       	adc	r27, r27
    1da2:	ee 1f       	adc	r30, r30
    1da4:	ff 1f       	adc	r31, r31
    1da6:	a2 17       	cp	r26, r18
    1da8:	b3 07       	cpc	r27, r19
    1daa:	e4 07       	cpc	r30, r20
    1dac:	f5 07       	cpc	r31, r21
    1dae:	20 f0       	brcs	.+8      	; 0x1db8 <__udivmodsi4_ep>
    1db0:	a2 1b       	sub	r26, r18
    1db2:	b3 0b       	sbc	r27, r19
    1db4:	e4 0b       	sbc	r30, r20
    1db6:	f5 0b       	sbc	r31, r21

00001db8 <__udivmodsi4_ep>:
    1db8:	66 1f       	adc	r22, r22
    1dba:	77 1f       	adc	r23, r23
    1dbc:	88 1f       	adc	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	1a 94       	dec	r1
    1dc2:	69 f7       	brne	.-38     	; 0x1d9e <__udivmodsi4_loop>
    1dc4:	60 95       	com	r22
    1dc6:	70 95       	com	r23
    1dc8:	80 95       	com	r24
    1dca:	90 95       	com	r25
    1dcc:	9b 01       	movw	r18, r22
    1dce:	ac 01       	movw	r20, r24
    1dd0:	bd 01       	movw	r22, r26
    1dd2:	cf 01       	movw	r24, r30
    1dd4:	08 95       	ret

00001dd6 <__cmpdi2_s8>:
    1dd6:	00 24       	eor	r0, r0
    1dd8:	a7 fd       	sbrc	r26, 7
    1dda:	00 94       	com	r0
    1ddc:	2a 17       	cp	r18, r26
    1dde:	30 05       	cpc	r19, r0
    1de0:	40 05       	cpc	r20, r0
    1de2:	50 05       	cpc	r21, r0
    1de4:	60 05       	cpc	r22, r0
    1de6:	70 05       	cpc	r23, r0
    1de8:	80 05       	cpc	r24, r0
    1dea:	90 05       	cpc	r25, r0
    1dec:	08 95       	ret

00001dee <__tablejump2__>:
    1dee:	ee 0f       	add	r30, r30
    1df0:	ff 1f       	adc	r31, r31

00001df2 <__tablejump__>:
    1df2:	05 90       	lpm	r0, Z+
    1df4:	f4 91       	lpm	r31, Z+
    1df6:	e0 2d       	mov	r30, r0
    1df8:	09 94       	ijmp

00001dfa <__strlen_P>:
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	05 90       	lpm	r0, Z+
    1dfe:	00 20       	and	r0, r0
    1e00:	e9 f7       	brne	.-6      	; 0x1dfc <__strlen_P+0x2>
    1e02:	80 95       	com	r24
    1e04:	90 95       	com	r25
    1e06:	8e 0f       	add	r24, r30
    1e08:	9f 1f       	adc	r25, r31
    1e0a:	08 95       	ret

00001e0c <fdevopen>:
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	ec 01       	movw	r28, r24
    1e16:	8b 01       	movw	r16, r22
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	31 f4       	brne	.+12     	; 0x1e28 <fdevopen+0x1c>
    1e1c:	61 15       	cp	r22, r1
    1e1e:	71 05       	cpc	r23, r1
    1e20:	19 f4       	brne	.+6      	; 0x1e28 <fdevopen+0x1c>
    1e22:	e0 e0       	ldi	r30, 0x00	; 0
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	37 c0       	rjmp	.+110    	; 0x1e96 <fdevopen+0x8a>
    1e28:	6e e0       	ldi	r22, 0x0E	; 14
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 8e 11 	call	0x231c	; 0x231c <calloc>
    1e34:	fc 01       	movw	r30, r24
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	a1 f3       	breq	.-24     	; 0x1e22 <fdevopen+0x16>
    1e3a:	80 e8       	ldi	r24, 0x80	; 128
    1e3c:	83 83       	std	Z+3, r24	; 0x03
    1e3e:	01 15       	cp	r16, r1
    1e40:	11 05       	cpc	r17, r1
    1e42:	71 f0       	breq	.+28     	; 0x1e60 <fdevopen+0x54>
    1e44:	13 87       	std	Z+11, r17	; 0x0b
    1e46:	02 87       	std	Z+10, r16	; 0x0a
    1e48:	81 e8       	ldi	r24, 0x81	; 129
    1e4a:	83 83       	std	Z+3, r24	; 0x03
    1e4c:	80 91 b3 02 	lds	r24, 0x02B3
    1e50:	90 91 b4 02 	lds	r25, 0x02B4
    1e54:	89 2b       	or	r24, r25
    1e56:	21 f4       	brne	.+8      	; 0x1e60 <fdevopen+0x54>
    1e58:	f0 93 b4 02 	sts	0x02B4, r31
    1e5c:	e0 93 b3 02 	sts	0x02B3, r30
    1e60:	20 97       	sbiw	r28, 0x00	; 0
    1e62:	c9 f0       	breq	.+50     	; 0x1e96 <fdevopen+0x8a>
    1e64:	d1 87       	std	Z+9, r29	; 0x09
    1e66:	c0 87       	std	Z+8, r28	; 0x08
    1e68:	83 81       	ldd	r24, Z+3	; 0x03
    1e6a:	82 60       	ori	r24, 0x02	; 2
    1e6c:	83 83       	std	Z+3, r24	; 0x03
    1e6e:	80 91 b5 02 	lds	r24, 0x02B5
    1e72:	90 91 b6 02 	lds	r25, 0x02B6
    1e76:	89 2b       	or	r24, r25
    1e78:	71 f4       	brne	.+28     	; 0x1e96 <fdevopen+0x8a>
    1e7a:	f0 93 b6 02 	sts	0x02B6, r31
    1e7e:	e0 93 b5 02 	sts	0x02B5, r30
    1e82:	80 91 b7 02 	lds	r24, 0x02B7
    1e86:	90 91 b8 02 	lds	r25, 0x02B8
    1e8a:	89 2b       	or	r24, r25
    1e8c:	21 f4       	brne	.+8      	; 0x1e96 <fdevopen+0x8a>
    1e8e:	f0 93 b8 02 	sts	0x02B8, r31
    1e92:	e0 93 b7 02 	sts	0x02B7, r30
    1e96:	cf 01       	movw	r24, r30
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	08 95       	ret

00001ea2 <printf>:
    1ea2:	a2 e0       	ldi	r26, 0x02	; 2
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e7 e5       	ldi	r30, 0x57	; 87
    1ea8:	ff e0       	ldi	r31, 0x0F	; 15
    1eaa:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__+0x20>
    1eae:	fe 01       	movw	r30, r28
    1eb0:	37 96       	adiw	r30, 0x07	; 7
    1eb2:	61 91       	ld	r22, Z+
    1eb4:	71 91       	ld	r23, Z+
    1eb6:	fa 83       	std	Y+2, r31	; 0x02
    1eb8:	e9 83       	std	Y+1, r30	; 0x01
    1eba:	af 01       	movw	r20, r30
    1ebc:	80 91 b5 02 	lds	r24, 0x02B5
    1ec0:	90 91 b6 02 	lds	r25, 0x02B6
    1ec4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <vfprintf>
    1ec8:	22 96       	adiw	r28, 0x02	; 2
    1eca:	e2 e0       	ldi	r30, 0x02	; 2
    1ecc:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__+0x20>

00001ed0 <printf_P>:
    1ed0:	a2 e0       	ldi	r26, 0x02	; 2
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	ee e6       	ldi	r30, 0x6E	; 110
    1ed6:	ff e0       	ldi	r31, 0x0F	; 15
    1ed8:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__+0x1c>
    1edc:	fe 01       	movw	r30, r28
    1ede:	39 96       	adiw	r30, 0x09	; 9
    1ee0:	61 91       	ld	r22, Z+
    1ee2:	71 91       	ld	r23, Z+
    1ee4:	fa 83       	std	Y+2, r31	; 0x02
    1ee6:	e9 83       	std	Y+1, r30	; 0x01
    1ee8:	05 eb       	ldi	r16, 0xB5	; 181
    1eea:	12 e0       	ldi	r17, 0x02	; 2
    1eec:	d8 01       	movw	r26, r16
    1eee:	8d 91       	ld	r24, X+
    1ef0:	9c 91       	ld	r25, X
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	13 96       	adiw	r26, 0x03	; 3
    1ef6:	2c 91       	ld	r18, X
    1ef8:	13 97       	sbiw	r26, 0x03	; 3
    1efa:	28 60       	ori	r18, 0x08	; 8
    1efc:	13 96       	adiw	r26, 0x03	; 3
    1efe:	2c 93       	st	X, r18
    1f00:	af 01       	movw	r20, r30
    1f02:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <vfprintf>
    1f06:	d8 01       	movw	r26, r16
    1f08:	ed 91       	ld	r30, X+
    1f0a:	fc 91       	ld	r31, X
    1f0c:	23 81       	ldd	r18, Z+3	; 0x03
    1f0e:	27 7f       	andi	r18, 0xF7	; 247
    1f10:	23 83       	std	Z+3, r18	; 0x03
    1f12:	22 96       	adiw	r28, 0x02	; 2
    1f14:	e4 e0       	ldi	r30, 0x04	; 4
    1f16:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__+0x1c>

00001f1a <sprintf>:
    1f1a:	a0 e1       	ldi	r26, 0x10	; 16
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e3 e9       	ldi	r30, 0x93	; 147
    1f20:	ff e0       	ldi	r31, 0x0F	; 15
    1f22:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__+0x1c>
    1f26:	0f 89       	ldd	r16, Y+23	; 0x17
    1f28:	18 8d       	ldd	r17, Y+24	; 0x18
    1f2a:	86 e0       	ldi	r24, 0x06	; 6
    1f2c:	8c 83       	std	Y+4, r24	; 0x04
    1f2e:	1a 83       	std	Y+2, r17	; 0x02
    1f30:	09 83       	std	Y+1, r16	; 0x01
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	9f e7       	ldi	r25, 0x7F	; 127
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	ae 01       	movw	r20, r28
    1f3c:	45 5e       	subi	r20, 0xE5	; 229
    1f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f40:	58 8b       	std	Y+16, r21	; 0x10
    1f42:	4f 87       	std	Y+15, r20	; 0x0f
    1f44:	69 8d       	ldd	r22, Y+25	; 0x19
    1f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f48:	ce 01       	movw	r24, r28
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <vfprintf>
    1f50:	ef 81       	ldd	r30, Y+7	; 0x07
    1f52:	f8 85       	ldd	r31, Y+8	; 0x08
    1f54:	e0 0f       	add	r30, r16
    1f56:	f1 1f       	adc	r31, r17
    1f58:	10 82       	st	Z, r1
    1f5a:	60 96       	adiw	r28, 0x10	; 16
    1f5c:	e4 e0       	ldi	r30, 0x04	; 4
    1f5e:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__+0x1c>

00001f62 <vfprintf>:
    1f62:	ac e0       	ldi	r26, 0x0C	; 12
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e7 eb       	ldi	r30, 0xB7	; 183
    1f68:	ff e0       	ldi	r31, 0x0F	; 15
    1f6a:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__>
    1f6e:	7c 01       	movw	r14, r24
    1f70:	6b 01       	movw	r12, r22
    1f72:	8a 01       	movw	r16, r20
    1f74:	fc 01       	movw	r30, r24
    1f76:	17 82       	std	Z+7, r1	; 0x07
    1f78:	16 82       	std	Z+6, r1	; 0x06
    1f7a:	83 81       	ldd	r24, Z+3	; 0x03
    1f7c:	81 ff       	sbrs	r24, 1
    1f7e:	c7 c1       	rjmp	.+910    	; 0x230e <vfprintf+0x3ac>
    1f80:	88 24       	eor	r8, r8
    1f82:	83 94       	inc	r8
    1f84:	91 2c       	mov	r9, r1
    1f86:	8c 0e       	add	r8, r28
    1f88:	9d 1e       	adc	r9, r29
    1f8a:	f7 01       	movw	r30, r14
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	f6 01       	movw	r30, r12
    1f90:	93 fd       	sbrc	r25, 3
    1f92:	85 91       	lpm	r24, Z+
    1f94:	93 ff       	sbrs	r25, 3
    1f96:	81 91       	ld	r24, Z+
    1f98:	6f 01       	movw	r12, r30
    1f9a:	88 23       	and	r24, r24
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <vfprintf+0x3e>
    1f9e:	b3 c1       	rjmp	.+870    	; 0x2306 <vfprintf+0x3a4>
    1fa0:	85 32       	cpi	r24, 0x25	; 37
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <vfprintf+0x50>
    1fa4:	93 fd       	sbrc	r25, 3
    1fa6:	85 91       	lpm	r24, Z+
    1fa8:	93 ff       	sbrs	r25, 3
    1faa:	81 91       	ld	r24, Z+
    1fac:	6f 01       	movw	r12, r30
    1fae:	85 32       	cpi	r24, 0x25	; 37
    1fb0:	29 f4       	brne	.+10     	; 0x1fbc <vfprintf+0x5a>
    1fb2:	b7 01       	movw	r22, r14
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
    1fba:	e7 cf       	rjmp	.-50     	; 0x1f8a <vfprintf+0x28>
    1fbc:	71 2c       	mov	r7, r1
    1fbe:	31 2c       	mov	r3, r1
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	20 32       	cpi	r18, 0x20	; 32
    1fc4:	a8 f4       	brcc	.+42     	; 0x1ff0 <vfprintf+0x8e>
    1fc6:	8b 32       	cpi	r24, 0x2B	; 43
    1fc8:	61 f0       	breq	.+24     	; 0x1fe2 <vfprintf+0x80>
    1fca:	28 f4       	brcc	.+10     	; 0x1fd6 <vfprintf+0x74>
    1fcc:	80 32       	cpi	r24, 0x20	; 32
    1fce:	51 f0       	breq	.+20     	; 0x1fe4 <vfprintf+0x82>
    1fd0:	83 32       	cpi	r24, 0x23	; 35
    1fd2:	71 f4       	brne	.+28     	; 0x1ff0 <vfprintf+0x8e>
    1fd4:	0b c0       	rjmp	.+22     	; 0x1fec <vfprintf+0x8a>
    1fd6:	8d 32       	cpi	r24, 0x2D	; 45
    1fd8:	39 f0       	breq	.+14     	; 0x1fe8 <vfprintf+0x86>
    1fda:	80 33       	cpi	r24, 0x30	; 48
    1fdc:	49 f4       	brne	.+18     	; 0x1ff0 <vfprintf+0x8e>
    1fde:	21 60       	ori	r18, 0x01	; 1
    1fe0:	28 c0       	rjmp	.+80     	; 0x2032 <vfprintf+0xd0>
    1fe2:	22 60       	ori	r18, 0x02	; 2
    1fe4:	24 60       	ori	r18, 0x04	; 4
    1fe6:	25 c0       	rjmp	.+74     	; 0x2032 <vfprintf+0xd0>
    1fe8:	28 60       	ori	r18, 0x08	; 8
    1fea:	23 c0       	rjmp	.+70     	; 0x2032 <vfprintf+0xd0>
    1fec:	20 61       	ori	r18, 0x10	; 16
    1fee:	21 c0       	rjmp	.+66     	; 0x2032 <vfprintf+0xd0>
    1ff0:	27 fd       	sbrc	r18, 7
    1ff2:	27 c0       	rjmp	.+78     	; 0x2042 <vfprintf+0xe0>
    1ff4:	38 2f       	mov	r19, r24
    1ff6:	30 53       	subi	r19, 0x30	; 48
    1ff8:	3a 30       	cpi	r19, 0x0A	; 10
    1ffa:	78 f4       	brcc	.+30     	; 0x201a <vfprintf+0xb8>
    1ffc:	26 ff       	sbrs	r18, 6
    1ffe:	06 c0       	rjmp	.+12     	; 0x200c <vfprintf+0xaa>
    2000:	fa e0       	ldi	r31, 0x0A	; 10
    2002:	7f 9e       	mul	r7, r31
    2004:	30 0d       	add	r19, r0
    2006:	11 24       	eor	r1, r1
    2008:	73 2e       	mov	r7, r19
    200a:	13 c0       	rjmp	.+38     	; 0x2032 <vfprintf+0xd0>
    200c:	8a e0       	ldi	r24, 0x0A	; 10
    200e:	38 9e       	mul	r3, r24
    2010:	30 0d       	add	r19, r0
    2012:	11 24       	eor	r1, r1
    2014:	33 2e       	mov	r3, r19
    2016:	20 62       	ori	r18, 0x20	; 32
    2018:	0c c0       	rjmp	.+24     	; 0x2032 <vfprintf+0xd0>
    201a:	8e 32       	cpi	r24, 0x2E	; 46
    201c:	21 f4       	brne	.+8      	; 0x2026 <vfprintf+0xc4>
    201e:	26 fd       	sbrc	r18, 6
    2020:	72 c1       	rjmp	.+740    	; 0x2306 <vfprintf+0x3a4>
    2022:	20 64       	ori	r18, 0x40	; 64
    2024:	06 c0       	rjmp	.+12     	; 0x2032 <vfprintf+0xd0>
    2026:	8c 36       	cpi	r24, 0x6C	; 108
    2028:	11 f4       	brne	.+4      	; 0x202e <vfprintf+0xcc>
    202a:	20 68       	ori	r18, 0x80	; 128
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <vfprintf+0xd0>
    202e:	88 36       	cpi	r24, 0x68	; 104
    2030:	41 f4       	brne	.+16     	; 0x2042 <vfprintf+0xe0>
    2032:	f6 01       	movw	r30, r12
    2034:	93 fd       	sbrc	r25, 3
    2036:	85 91       	lpm	r24, Z+
    2038:	93 ff       	sbrs	r25, 3
    203a:	81 91       	ld	r24, Z+
    203c:	6f 01       	movw	r12, r30
    203e:	81 11       	cpse	r24, r1
    2040:	c0 cf       	rjmp	.-128    	; 0x1fc2 <vfprintf+0x60>
    2042:	98 2f       	mov	r25, r24
    2044:	95 54       	subi	r25, 0x45	; 69
    2046:	93 30       	cpi	r25, 0x03	; 3
    2048:	18 f0       	brcs	.+6      	; 0x2050 <vfprintf+0xee>
    204a:	90 52       	subi	r25, 0x20	; 32
    204c:	93 30       	cpi	r25, 0x03	; 3
    204e:	28 f4       	brcc	.+10     	; 0x205a <vfprintf+0xf8>
    2050:	0c 5f       	subi	r16, 0xFC	; 252
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	ff e3       	ldi	r31, 0x3F	; 63
    2056:	f9 83       	std	Y+1, r31	; 0x01
    2058:	0d c0       	rjmp	.+26     	; 0x2074 <vfprintf+0x112>
    205a:	83 36       	cpi	r24, 0x63	; 99
    205c:	31 f0       	breq	.+12     	; 0x206a <vfprintf+0x108>
    205e:	83 37       	cpi	r24, 0x73	; 115
    2060:	71 f0       	breq	.+28     	; 0x207e <vfprintf+0x11c>
    2062:	83 35       	cpi	r24, 0x53	; 83
    2064:	09 f0       	breq	.+2      	; 0x2068 <vfprintf+0x106>
    2066:	5e c0       	rjmp	.+188    	; 0x2124 <vfprintf+0x1c2>
    2068:	23 c0       	rjmp	.+70     	; 0x20b0 <vfprintf+0x14e>
    206a:	f8 01       	movw	r30, r16
    206c:	80 81       	ld	r24, Z
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	0e 5f       	subi	r16, 0xFE	; 254
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	66 24       	eor	r6, r6
    2076:	63 94       	inc	r6
    2078:	71 2c       	mov	r7, r1
    207a:	54 01       	movw	r10, r8
    207c:	15 c0       	rjmp	.+42     	; 0x20a8 <vfprintf+0x146>
    207e:	28 01       	movw	r4, r16
    2080:	f2 e0       	ldi	r31, 0x02	; 2
    2082:	4f 0e       	add	r4, r31
    2084:	51 1c       	adc	r5, r1
    2086:	f8 01       	movw	r30, r16
    2088:	a0 80       	ld	r10, Z
    208a:	b1 80       	ldd	r11, Z+1	; 0x01
    208c:	26 ff       	sbrs	r18, 6
    208e:	03 c0       	rjmp	.+6      	; 0x2096 <vfprintf+0x134>
    2090:	67 2d       	mov	r22, r7
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	02 c0       	rjmp	.+4      	; 0x209a <vfprintf+0x138>
    2096:	6f ef       	ldi	r22, 0xFF	; 255
    2098:	7f ef       	ldi	r23, 0xFF	; 255
    209a:	c5 01       	movw	r24, r10
    209c:	2c 87       	std	Y+12, r18	; 0x0c
    209e:	0e 94 be 11 	call	0x237c	; 0x237c <strnlen>
    20a2:	3c 01       	movw	r6, r24
    20a4:	82 01       	movw	r16, r4
    20a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    20a8:	6f e7       	ldi	r22, 0x7F	; 127
    20aa:	26 2e       	mov	r2, r22
    20ac:	22 22       	and	r2, r18
    20ae:	18 c0       	rjmp	.+48     	; 0x20e0 <vfprintf+0x17e>
    20b0:	28 01       	movw	r4, r16
    20b2:	f2 e0       	ldi	r31, 0x02	; 2
    20b4:	4f 0e       	add	r4, r31
    20b6:	51 1c       	adc	r5, r1
    20b8:	f8 01       	movw	r30, r16
    20ba:	a0 80       	ld	r10, Z
    20bc:	b1 80       	ldd	r11, Z+1	; 0x01
    20be:	26 ff       	sbrs	r18, 6
    20c0:	03 c0       	rjmp	.+6      	; 0x20c8 <vfprintf+0x166>
    20c2:	67 2d       	mov	r22, r7
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <vfprintf+0x16a>
    20c8:	6f ef       	ldi	r22, 0xFF	; 255
    20ca:	7f ef       	ldi	r23, 0xFF	; 255
    20cc:	c5 01       	movw	r24, r10
    20ce:	2c 87       	std	Y+12, r18	; 0x0c
    20d0:	0e 94 ac 11 	call	0x2358	; 0x2358 <strnlen_P>
    20d4:	3c 01       	movw	r6, r24
    20d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    20d8:	50 e8       	ldi	r21, 0x80	; 128
    20da:	25 2e       	mov	r2, r21
    20dc:	22 2a       	or	r2, r18
    20de:	82 01       	movw	r16, r4
    20e0:	23 fc       	sbrc	r2, 3
    20e2:	1c c0       	rjmp	.+56     	; 0x211c <vfprintf+0x1ba>
    20e4:	06 c0       	rjmp	.+12     	; 0x20f2 <vfprintf+0x190>
    20e6:	b7 01       	movw	r22, r14
    20e8:	80 e2       	ldi	r24, 0x20	; 32
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
    20f0:	3a 94       	dec	r3
    20f2:	83 2d       	mov	r24, r3
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	68 16       	cp	r6, r24
    20f8:	79 06       	cpc	r7, r25
    20fa:	a8 f3       	brcs	.-22     	; 0x20e6 <vfprintf+0x184>
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <vfprintf+0x1ba>
    20fe:	f5 01       	movw	r30, r10
    2100:	27 fc       	sbrc	r2, 7
    2102:	85 91       	lpm	r24, Z+
    2104:	27 fe       	sbrs	r2, 7
    2106:	81 91       	ld	r24, Z+
    2108:	5f 01       	movw	r10, r30
    210a:	b7 01       	movw	r22, r14
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
    2112:	31 10       	cpse	r3, r1
    2114:	3a 94       	dec	r3
    2116:	f1 e0       	ldi	r31, 0x01	; 1
    2118:	6f 1a       	sub	r6, r31
    211a:	71 08       	sbc	r7, r1
    211c:	61 14       	cp	r6, r1
    211e:	71 04       	cpc	r7, r1
    2120:	71 f7       	brne	.-36     	; 0x20fe <vfprintf+0x19c>
    2122:	ee c0       	rjmp	.+476    	; 0x2300 <vfprintf+0x39e>
    2124:	84 36       	cpi	r24, 0x64	; 100
    2126:	11 f0       	breq	.+4      	; 0x212c <vfprintf+0x1ca>
    2128:	89 36       	cpi	r24, 0x69	; 105
    212a:	41 f5       	brne	.+80     	; 0x217c <vfprintf+0x21a>
    212c:	f8 01       	movw	r30, r16
    212e:	27 ff       	sbrs	r18, 7
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <vfprintf+0x1de>
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	0c 5f       	subi	r16, 0xFC	; 252
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	08 c0       	rjmp	.+16     	; 0x2150 <vfprintf+0x1ee>
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	88 27       	eor	r24, r24
    2146:	77 fd       	sbrc	r23, 7
    2148:	80 95       	com	r24
    214a:	98 2f       	mov	r25, r24
    214c:	0e 5f       	subi	r16, 0xFE	; 254
    214e:	1f 4f       	sbci	r17, 0xFF	; 255
    2150:	4f e6       	ldi	r20, 0x6F	; 111
    2152:	64 2e       	mov	r6, r20
    2154:	62 22       	and	r6, r18
    2156:	97 ff       	sbrs	r25, 7
    2158:	09 c0       	rjmp	.+18     	; 0x216c <vfprintf+0x20a>
    215a:	90 95       	com	r25
    215c:	80 95       	com	r24
    215e:	70 95       	com	r23
    2160:	61 95       	neg	r22
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	8f 4f       	sbci	r24, 0xFF	; 255
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	f0 e8       	ldi	r31, 0x80	; 128
    216a:	6f 2a       	or	r6, r31
    216c:	2a e0       	ldi	r18, 0x0A	; 10
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	a4 01       	movw	r20, r8
    2172:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__ultoa_invert>
    2176:	a8 2e       	mov	r10, r24
    2178:	a8 18       	sub	r10, r8
    217a:	44 c0       	rjmp	.+136    	; 0x2204 <vfprintf+0x2a2>
    217c:	85 37       	cpi	r24, 0x75	; 117
    217e:	31 f4       	brne	.+12     	; 0x218c <vfprintf+0x22a>
    2180:	3f ee       	ldi	r19, 0xEF	; 239
    2182:	b3 2e       	mov	r11, r19
    2184:	b2 22       	and	r11, r18
    2186:	2a e0       	ldi	r18, 0x0A	; 10
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	24 c0       	rjmp	.+72     	; 0x21d4 <vfprintf+0x272>
    218c:	99 ef       	ldi	r25, 0xF9	; 249
    218e:	b9 2e       	mov	r11, r25
    2190:	b2 22       	and	r11, r18
    2192:	8f 36       	cpi	r24, 0x6F	; 111
    2194:	b9 f0       	breq	.+46     	; 0x21c4 <vfprintf+0x262>
    2196:	20 f4       	brcc	.+8      	; 0x21a0 <vfprintf+0x23e>
    2198:	88 35       	cpi	r24, 0x58	; 88
    219a:	09 f0       	breq	.+2      	; 0x219e <vfprintf+0x23c>
    219c:	b4 c0       	rjmp	.+360    	; 0x2306 <vfprintf+0x3a4>
    219e:	0d c0       	rjmp	.+26     	; 0x21ba <vfprintf+0x258>
    21a0:	80 37       	cpi	r24, 0x70	; 112
    21a2:	21 f0       	breq	.+8      	; 0x21ac <vfprintf+0x24a>
    21a4:	88 37       	cpi	r24, 0x78	; 120
    21a6:	09 f0       	breq	.+2      	; 0x21aa <vfprintf+0x248>
    21a8:	ae c0       	rjmp	.+348    	; 0x2306 <vfprintf+0x3a4>
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <vfprintf+0x24e>
    21ac:	20 e1       	ldi	r18, 0x10	; 16
    21ae:	b2 2a       	or	r11, r18
    21b0:	b4 fe       	sbrs	r11, 4
    21b2:	0b c0       	rjmp	.+22     	; 0x21ca <vfprintf+0x268>
    21b4:	84 e0       	ldi	r24, 0x04	; 4
    21b6:	b8 2a       	or	r11, r24
    21b8:	08 c0       	rjmp	.+16     	; 0x21ca <vfprintf+0x268>
    21ba:	24 ff       	sbrs	r18, 4
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <vfprintf+0x26e>
    21be:	e6 e0       	ldi	r30, 0x06	; 6
    21c0:	be 2a       	or	r11, r30
    21c2:	06 c0       	rjmp	.+12     	; 0x21d0 <vfprintf+0x26e>
    21c4:	28 e0       	ldi	r18, 0x08	; 8
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	05 c0       	rjmp	.+10     	; 0x21d4 <vfprintf+0x272>
    21ca:	20 e1       	ldi	r18, 0x10	; 16
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <vfprintf+0x272>
    21d0:	20 e1       	ldi	r18, 0x10	; 16
    21d2:	32 e0       	ldi	r19, 0x02	; 2
    21d4:	f8 01       	movw	r30, r16
    21d6:	b7 fe       	sbrs	r11, 7
    21d8:	07 c0       	rjmp	.+14     	; 0x21e8 <vfprintf+0x286>
    21da:	60 81       	ld	r22, Z
    21dc:	71 81       	ldd	r23, Z+1	; 0x01
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	0c 5f       	subi	r16, 0xFC	; 252
    21e4:	1f 4f       	sbci	r17, 0xFF	; 255
    21e6:	06 c0       	rjmp	.+12     	; 0x21f4 <vfprintf+0x292>
    21e8:	60 81       	ld	r22, Z
    21ea:	71 81       	ldd	r23, Z+1	; 0x01
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 5f       	subi	r16, 0xFE	; 254
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	a4 01       	movw	r20, r8
    21f6:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__ultoa_invert>
    21fa:	a8 2e       	mov	r10, r24
    21fc:	a8 18       	sub	r10, r8
    21fe:	8f e7       	ldi	r24, 0x7F	; 127
    2200:	68 2e       	mov	r6, r24
    2202:	6b 20       	and	r6, r11
    2204:	66 fe       	sbrs	r6, 6
    2206:	0b c0       	rjmp	.+22     	; 0x221e <vfprintf+0x2bc>
    2208:	36 2d       	mov	r19, r6
    220a:	3e 7f       	andi	r19, 0xFE	; 254
    220c:	a7 14       	cp	r10, r7
    220e:	50 f4       	brcc	.+20     	; 0x2224 <vfprintf+0x2c2>
    2210:	64 fe       	sbrs	r6, 4
    2212:	0a c0       	rjmp	.+20     	; 0x2228 <vfprintf+0x2c6>
    2214:	62 fc       	sbrc	r6, 2
    2216:	08 c0       	rjmp	.+16     	; 0x2228 <vfprintf+0x2c6>
    2218:	36 2d       	mov	r19, r6
    221a:	3e 7e       	andi	r19, 0xEE	; 238
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <vfprintf+0x2c6>
    221e:	ba 2c       	mov	r11, r10
    2220:	36 2d       	mov	r19, r6
    2222:	03 c0       	rjmp	.+6      	; 0x222a <vfprintf+0x2c8>
    2224:	ba 2c       	mov	r11, r10
    2226:	01 c0       	rjmp	.+2      	; 0x222a <vfprintf+0x2c8>
    2228:	b7 2c       	mov	r11, r7
    222a:	34 ff       	sbrs	r19, 4
    222c:	0d c0       	rjmp	.+26     	; 0x2248 <vfprintf+0x2e6>
    222e:	fe 01       	movw	r30, r28
    2230:	ea 0d       	add	r30, r10
    2232:	f1 1d       	adc	r31, r1
    2234:	80 81       	ld	r24, Z
    2236:	80 33       	cpi	r24, 0x30	; 48
    2238:	11 f4       	brne	.+4      	; 0x223e <vfprintf+0x2dc>
    223a:	39 7e       	andi	r19, 0xE9	; 233
    223c:	09 c0       	rjmp	.+18     	; 0x2250 <vfprintf+0x2ee>
    223e:	32 ff       	sbrs	r19, 2
    2240:	06 c0       	rjmp	.+12     	; 0x224e <vfprintf+0x2ec>
    2242:	b3 94       	inc	r11
    2244:	b3 94       	inc	r11
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <vfprintf+0x2ee>
    2248:	83 2f       	mov	r24, r19
    224a:	86 78       	andi	r24, 0x86	; 134
    224c:	09 f0       	breq	.+2      	; 0x2250 <vfprintf+0x2ee>
    224e:	b3 94       	inc	r11
    2250:	33 fd       	sbrc	r19, 3
    2252:	14 c0       	rjmp	.+40     	; 0x227c <vfprintf+0x31a>
    2254:	30 ff       	sbrs	r19, 0
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <vfprintf+0x314>
    2258:	7a 2c       	mov	r7, r10
    225a:	b3 14       	cp	r11, r3
    225c:	60 f4       	brcc	.+24     	; 0x2276 <vfprintf+0x314>
    225e:	73 0c       	add	r7, r3
    2260:	7b 18       	sub	r7, r11
    2262:	b3 2c       	mov	r11, r3
    2264:	08 c0       	rjmp	.+16     	; 0x2276 <vfprintf+0x314>
    2266:	b7 01       	movw	r22, r14
    2268:	80 e2       	ldi	r24, 0x20	; 32
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	3c 87       	std	Y+12, r19	; 0x0c
    226e:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
    2272:	b3 94       	inc	r11
    2274:	3c 85       	ldd	r19, Y+12	; 0x0c
    2276:	b3 14       	cp	r11, r3
    2278:	b0 f3       	brcs	.-20     	; 0x2266 <vfprintf+0x304>
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <vfprintf+0x322>
    227c:	b3 14       	cp	r11, r3
    227e:	10 f4       	brcc	.+4      	; 0x2284 <vfprintf+0x322>
    2280:	3b 18       	sub	r3, r11
    2282:	01 c0       	rjmp	.+2      	; 0x2286 <vfprintf+0x324>
    2284:	31 2c       	mov	r3, r1
    2286:	34 ff       	sbrs	r19, 4
    2288:	12 c0       	rjmp	.+36     	; 0x22ae <vfprintf+0x34c>
    228a:	b7 01       	movw	r22, r14
    228c:	80 e3       	ldi	r24, 0x30	; 48
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	3c 87       	std	Y+12, r19	; 0x0c
    2292:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
    2296:	3c 85       	ldd	r19, Y+12	; 0x0c
    2298:	32 ff       	sbrs	r19, 2
    229a:	1e c0       	rjmp	.+60     	; 0x22d8 <vfprintf+0x376>
    229c:	31 ff       	sbrs	r19, 1
    229e:	03 c0       	rjmp	.+6      	; 0x22a6 <vfprintf+0x344>
    22a0:	88 e5       	ldi	r24, 0x58	; 88
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <vfprintf+0x348>
    22a6:	88 e7       	ldi	r24, 0x78	; 120
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	b7 01       	movw	r22, r14
    22ac:	0c c0       	rjmp	.+24     	; 0x22c6 <vfprintf+0x364>
    22ae:	83 2f       	mov	r24, r19
    22b0:	86 78       	andi	r24, 0x86	; 134
    22b2:	91 f0       	breq	.+36     	; 0x22d8 <vfprintf+0x376>
    22b4:	31 fd       	sbrc	r19, 1
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <vfprintf+0x35a>
    22b8:	80 e2       	ldi	r24, 0x20	; 32
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <vfprintf+0x35c>
    22bc:	8b e2       	ldi	r24, 0x2B	; 43
    22be:	37 fd       	sbrc	r19, 7
    22c0:	8d e2       	ldi	r24, 0x2D	; 45
    22c2:	b7 01       	movw	r22, r14
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
    22ca:	06 c0       	rjmp	.+12     	; 0x22d8 <vfprintf+0x376>
    22cc:	b7 01       	movw	r22, r14
    22ce:	80 e3       	ldi	r24, 0x30	; 48
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
    22d6:	7a 94       	dec	r7
    22d8:	a7 14       	cp	r10, r7
    22da:	c0 f3       	brcs	.-16     	; 0x22cc <vfprintf+0x36a>
    22dc:	aa 94       	dec	r10
    22de:	f4 01       	movw	r30, r8
    22e0:	ea 0d       	add	r30, r10
    22e2:	f1 1d       	adc	r31, r1
    22e4:	b7 01       	movw	r22, r14
    22e6:	80 81       	ld	r24, Z
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
    22ee:	a1 10       	cpse	r10, r1
    22f0:	f5 cf       	rjmp	.-22     	; 0x22dc <vfprintf+0x37a>
    22f2:	06 c0       	rjmp	.+12     	; 0x2300 <vfprintf+0x39e>
    22f4:	b7 01       	movw	r22, r14
    22f6:	80 e2       	ldi	r24, 0x20	; 32
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 c9 11 	call	0x2392	; 0x2392 <fputc>
    22fe:	3a 94       	dec	r3
    2300:	31 10       	cpse	r3, r1
    2302:	f8 cf       	rjmp	.-16     	; 0x22f4 <vfprintf+0x392>
    2304:	42 ce       	rjmp	.-892    	; 0x1f8a <vfprintf+0x28>
    2306:	f7 01       	movw	r30, r14
    2308:	26 81       	ldd	r18, Z+6	; 0x06
    230a:	37 81       	ldd	r19, Z+7	; 0x07
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <vfprintf+0x3b0>
    230e:	2f ef       	ldi	r18, 0xFF	; 255
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	c9 01       	movw	r24, r18
    2314:	2c 96       	adiw	r28, 0x0c	; 12
    2316:	e2 e1       	ldi	r30, 0x12	; 18
    2318:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>

0000231c <calloc>:
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	68 9f       	mul	r22, r24
    2326:	80 01       	movw	r16, r0
    2328:	69 9f       	mul	r22, r25
    232a:	10 0d       	add	r17, r0
    232c:	78 9f       	mul	r23, r24
    232e:	10 0d       	add	r17, r0
    2330:	11 24       	eor	r1, r1
    2332:	c8 01       	movw	r24, r16
    2334:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <malloc>
    2338:	c8 2f       	mov	r28, r24
    233a:	d9 2f       	mov	r29, r25
    233c:	20 97       	sbiw	r28, 0x00	; 0
    233e:	31 f0       	breq	.+12     	; 0x234c <calloc+0x30>
    2340:	a8 01       	movw	r20, r16
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	8c 2f       	mov	r24, r28
    2348:	0e 94 b7 11 	call	0x236e	; 0x236e <memset>
    234c:	ce 01       	movw	r24, r28
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	08 95       	ret

00002358 <strnlen_P>:
    2358:	fc 01       	movw	r30, r24
    235a:	05 90       	lpm	r0, Z+
    235c:	61 50       	subi	r22, 0x01	; 1
    235e:	70 40       	sbci	r23, 0x00	; 0
    2360:	01 10       	cpse	r0, r1
    2362:	d8 f7       	brcc	.-10     	; 0x235a <strnlen_P+0x2>
    2364:	80 95       	com	r24
    2366:	90 95       	com	r25
    2368:	8e 0f       	add	r24, r30
    236a:	9f 1f       	adc	r25, r31
    236c:	08 95       	ret

0000236e <memset>:
    236e:	dc 01       	movw	r26, r24
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <memset+0x6>
    2372:	6d 93       	st	X+, r22
    2374:	41 50       	subi	r20, 0x01	; 1
    2376:	50 40       	sbci	r21, 0x00	; 0
    2378:	e0 f7       	brcc	.-8      	; 0x2372 <memset+0x4>
    237a:	08 95       	ret

0000237c <strnlen>:
    237c:	fc 01       	movw	r30, r24
    237e:	61 50       	subi	r22, 0x01	; 1
    2380:	70 40       	sbci	r23, 0x00	; 0
    2382:	01 90       	ld	r0, Z+
    2384:	01 10       	cpse	r0, r1
    2386:	d8 f7       	brcc	.-10     	; 0x237e <strnlen+0x2>
    2388:	80 95       	com	r24
    238a:	90 95       	com	r25
    238c:	8e 0f       	add	r24, r30
    238e:	9f 1f       	adc	r25, r31
    2390:	08 95       	ret

00002392 <fputc>:
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	8c 01       	movw	r16, r24
    239c:	eb 01       	movw	r28, r22
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	81 fd       	sbrc	r24, 1
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <fputc+0x18>
    23a4:	0f ef       	ldi	r16, 0xFF	; 255
    23a6:	1f ef       	ldi	r17, 0xFF	; 255
    23a8:	1a c0       	rjmp	.+52     	; 0x23de <fputc+0x4c>
    23aa:	82 ff       	sbrs	r24, 2
    23ac:	0d c0       	rjmp	.+26     	; 0x23c8 <fputc+0x36>
    23ae:	2e 81       	ldd	r18, Y+6	; 0x06
    23b0:	3f 81       	ldd	r19, Y+7	; 0x07
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	9d 81       	ldd	r25, Y+5	; 0x05
    23b6:	28 17       	cp	r18, r24
    23b8:	39 07       	cpc	r19, r25
    23ba:	64 f4       	brge	.+24     	; 0x23d4 <fputc+0x42>
    23bc:	e8 81       	ld	r30, Y
    23be:	f9 81       	ldd	r31, Y+1	; 0x01
    23c0:	01 93       	st	Z+, r16
    23c2:	f9 83       	std	Y+1, r31	; 0x01
    23c4:	e8 83       	st	Y, r30
    23c6:	06 c0       	rjmp	.+12     	; 0x23d4 <fputc+0x42>
    23c8:	e8 85       	ldd	r30, Y+8	; 0x08
    23ca:	f9 85       	ldd	r31, Y+9	; 0x09
    23cc:	80 2f       	mov	r24, r16
    23ce:	09 95       	icall
    23d0:	89 2b       	or	r24, r25
    23d2:	41 f7       	brne	.-48     	; 0x23a4 <fputc+0x12>
    23d4:	8e 81       	ldd	r24, Y+6	; 0x06
    23d6:	9f 81       	ldd	r25, Y+7	; 0x07
    23d8:	01 96       	adiw	r24, 0x01	; 1
    23da:	9f 83       	std	Y+7, r25	; 0x07
    23dc:	8e 83       	std	Y+6, r24	; 0x06
    23de:	c8 01       	movw	r24, r16
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	1f 91       	pop	r17
    23e6:	0f 91       	pop	r16
    23e8:	08 95       	ret

000023ea <__ultoa_invert>:
    23ea:	fa 01       	movw	r30, r20
    23ec:	aa 27       	eor	r26, r26
    23ee:	28 30       	cpi	r18, 0x08	; 8
    23f0:	51 f1       	breq	.+84     	; 0x2446 <__ultoa_invert+0x5c>
    23f2:	20 31       	cpi	r18, 0x10	; 16
    23f4:	81 f1       	breq	.+96     	; 0x2456 <__ultoa_invert+0x6c>
    23f6:	e8 94       	clt
    23f8:	6f 93       	push	r22
    23fa:	6e 7f       	andi	r22, 0xFE	; 254
    23fc:	6e 5f       	subi	r22, 0xFE	; 254
    23fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2400:	8f 4f       	sbci	r24, 0xFF	; 255
    2402:	9f 4f       	sbci	r25, 0xFF	; 255
    2404:	af 4f       	sbci	r26, 0xFF	; 255
    2406:	b1 e0       	ldi	r27, 0x01	; 1
    2408:	3e d0       	rcall	.+124    	; 0x2486 <__ultoa_invert+0x9c>
    240a:	b4 e0       	ldi	r27, 0x04	; 4
    240c:	3c d0       	rcall	.+120    	; 0x2486 <__ultoa_invert+0x9c>
    240e:	67 0f       	add	r22, r23
    2410:	78 1f       	adc	r23, r24
    2412:	89 1f       	adc	r24, r25
    2414:	9a 1f       	adc	r25, r26
    2416:	a1 1d       	adc	r26, r1
    2418:	68 0f       	add	r22, r24
    241a:	79 1f       	adc	r23, r25
    241c:	8a 1f       	adc	r24, r26
    241e:	91 1d       	adc	r25, r1
    2420:	a1 1d       	adc	r26, r1
    2422:	6a 0f       	add	r22, r26
    2424:	71 1d       	adc	r23, r1
    2426:	81 1d       	adc	r24, r1
    2428:	91 1d       	adc	r25, r1
    242a:	a1 1d       	adc	r26, r1
    242c:	20 d0       	rcall	.+64     	; 0x246e <__ultoa_invert+0x84>
    242e:	09 f4       	brne	.+2      	; 0x2432 <__ultoa_invert+0x48>
    2430:	68 94       	set
    2432:	3f 91       	pop	r19
    2434:	2a e0       	ldi	r18, 0x0A	; 10
    2436:	26 9f       	mul	r18, r22
    2438:	11 24       	eor	r1, r1
    243a:	30 19       	sub	r19, r0
    243c:	30 5d       	subi	r19, 0xD0	; 208
    243e:	31 93       	st	Z+, r19
    2440:	de f6       	brtc	.-74     	; 0x23f8 <__ultoa_invert+0xe>
    2442:	cf 01       	movw	r24, r30
    2444:	08 95       	ret
    2446:	46 2f       	mov	r20, r22
    2448:	47 70       	andi	r20, 0x07	; 7
    244a:	40 5d       	subi	r20, 0xD0	; 208
    244c:	41 93       	st	Z+, r20
    244e:	b3 e0       	ldi	r27, 0x03	; 3
    2450:	0f d0       	rcall	.+30     	; 0x2470 <__ultoa_invert+0x86>
    2452:	c9 f7       	brne	.-14     	; 0x2446 <__ultoa_invert+0x5c>
    2454:	f6 cf       	rjmp	.-20     	; 0x2442 <__ultoa_invert+0x58>
    2456:	46 2f       	mov	r20, r22
    2458:	4f 70       	andi	r20, 0x0F	; 15
    245a:	40 5d       	subi	r20, 0xD0	; 208
    245c:	4a 33       	cpi	r20, 0x3A	; 58
    245e:	18 f0       	brcs	.+6      	; 0x2466 <__ultoa_invert+0x7c>
    2460:	49 5d       	subi	r20, 0xD9	; 217
    2462:	31 fd       	sbrc	r19, 1
    2464:	40 52       	subi	r20, 0x20	; 32
    2466:	41 93       	st	Z+, r20
    2468:	02 d0       	rcall	.+4      	; 0x246e <__ultoa_invert+0x84>
    246a:	a9 f7       	brne	.-22     	; 0x2456 <__ultoa_invert+0x6c>
    246c:	ea cf       	rjmp	.-44     	; 0x2442 <__ultoa_invert+0x58>
    246e:	b4 e0       	ldi	r27, 0x04	; 4
    2470:	a6 95       	lsr	r26
    2472:	97 95       	ror	r25
    2474:	87 95       	ror	r24
    2476:	77 95       	ror	r23
    2478:	67 95       	ror	r22
    247a:	ba 95       	dec	r27
    247c:	c9 f7       	brne	.-14     	; 0x2470 <__ultoa_invert+0x86>
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	61 05       	cpc	r22, r1
    2482:	71 05       	cpc	r23, r1
    2484:	08 95       	ret
    2486:	9b 01       	movw	r18, r22
    2488:	ac 01       	movw	r20, r24
    248a:	0a 2e       	mov	r0, r26
    248c:	06 94       	lsr	r0
    248e:	57 95       	ror	r21
    2490:	47 95       	ror	r20
    2492:	37 95       	ror	r19
    2494:	27 95       	ror	r18
    2496:	ba 95       	dec	r27
    2498:	c9 f7       	brne	.-14     	; 0x248c <__ultoa_invert+0xa2>
    249a:	62 0f       	add	r22, r18
    249c:	73 1f       	adc	r23, r19
    249e:	84 1f       	adc	r24, r20
    24a0:	95 1f       	adc	r25, r21
    24a2:	a0 1d       	adc	r26, r0
    24a4:	08 95       	ret

000024a6 <__prologue_saves__>:
    24a6:	2f 92       	push	r2
    24a8:	3f 92       	push	r3
    24aa:	4f 92       	push	r4
    24ac:	5f 92       	push	r5
    24ae:	6f 92       	push	r6
    24b0:	7f 92       	push	r7
    24b2:	8f 92       	push	r8
    24b4:	9f 92       	push	r9
    24b6:	af 92       	push	r10
    24b8:	bf 92       	push	r11
    24ba:	cf 92       	push	r12
    24bc:	df 92       	push	r13
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	ca 1b       	sub	r28, r26
    24d0:	db 0b       	sbc	r29, r27
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	09 94       	ijmp

000024de <__epilogue_restores__>:
    24de:	2a 88       	ldd	r2, Y+18	; 0x12
    24e0:	39 88       	ldd	r3, Y+17	; 0x11
    24e2:	48 88       	ldd	r4, Y+16	; 0x10
    24e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    24ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    24f0:	b9 84       	ldd	r11, Y+9	; 0x09
    24f2:	c8 84       	ldd	r12, Y+8	; 0x08
    24f4:	df 80       	ldd	r13, Y+7	; 0x07
    24f6:	ee 80       	ldd	r14, Y+6	; 0x06
    24f8:	fd 80       	ldd	r15, Y+5	; 0x05
    24fa:	0c 81       	ldd	r16, Y+4	; 0x04
    24fc:	1b 81       	ldd	r17, Y+3	; 0x03
    24fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2500:	b9 81       	ldd	r27, Y+1	; 0x01
    2502:	ce 0f       	add	r28, r30
    2504:	d1 1d       	adc	r29, r1
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	ed 01       	movw	r28, r26
    2512:	08 95       	ret

00002514 <__do_global_dtors>:
    2514:	12 e0       	ldi	r17, 0x02	; 2
    2516:	c0 e8       	ldi	r28, 0x80	; 128
    2518:	d2 e0       	ldi	r29, 0x02	; 2
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <__do_global_dtors+0x10>
    251c:	fe 01       	movw	r30, r28
    251e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__tablejump__>
    2522:	22 96       	adiw	r28, 0x02	; 2
    2524:	c2 38       	cpi	r28, 0x82	; 130
    2526:	d1 07       	cpc	r29, r17
    2528:	c9 f7       	brne	.-14     	; 0x251c <__do_global_dtors+0x8>
    252a:	f8 94       	cli

0000252c <__stop_program>:
    252c:	ff cf       	rjmp	.-2      	; 0x252c <__stop_program>
